[
  {
    "author": "rvdh",
    "avatar": "1125d180d030a23119a1f61a07502651",
    "date": "2009-02-23T15:26:25.000Z",
    "content": "Good post PDP.\r\n\r\nTrue. most stuff even allready resides in the C libraries you already have. Same with nmap which uses those C libs. Like the sockets API et all. Same with sniffing a network, most stuff is provided in C libs as well and some parts are already accessable through the command line, takes a few commands to start capturing packets in your console in real time. Absolutely no need for a wireshark at all."
  },
  {
    "author": "pdp",
    "avatar": "c4db4e65c9f09f2a373fcaefa5e2bfb4",
    "date": "2009-02-23T16:45:01.000Z",
    "content": "actually I quite like wireshark :) but I was trying to encourage people to develop for the command line as it proves over time to be the simplest and fastest way to do things and given that you understand bash, you can do tones of good hacks."
  },
  {
    "author": "Pento",
    "avatar": "c753c966746c66ec5be64fc210fcdf22",
    "date": "2009-02-23T18:45:09.000Z",
    "content": "It's like window managers and DE in Linux. You can live for example in minimal WM like fluxbox or ever dwm and find and use some small application for different purposes. But you can install gnome|kde and spend this time for work. As I think nmap+GNU Core Utilities+metasploit is the best choice."
  },
  {
    "author": "pdp",
    "avatar": "c4db4e65c9f09f2a373fcaefa5e2bfb4",
    "date": "2009-02-23T18:59:03.000Z",
    "content": "imho, metasploit would have been a lot better if all it was just an exploitation framework, good for writing and running exploits only. The auxiliary modules are a bit redundant. perhaps the useful stuff like the BailiWicked auxiliary modules should have been put as exploit modules. and if only you could make the framework run faster :) that would have been great. other than that, it is one fine framework."
  },
  {
    "author": "pdp",
    "avatar": "c4db4e65c9f09f2a373fcaefa5e2bfb4",
    "date": "2009-02-23T19:02:25.000Z",
    "content": "same with nmap. although nmap's script scan option is quite powerful indeed, it just turns the tool into something which is not - a vulnerability scanner. coding in lua is no fun either."
  },
  {
    "author": "postmodern",
    "avatar": "66f5d5b64b951b3eeb8b6c34fcb69237",
    "date": "2009-02-25T00:58:25.000Z",
    "content": "Why still use shell scripting for this task, when it's far easier in a Python, Jython, Ruby, JRuby or even a NetBeans shell? Instead of using primitive commands, you could use a general purpose programming language with a syntax that is conducive towards one-liners.\r\n\r\nTaking it one step further, you could even load in various libraries or frameworks (there's more than just Metasploit) into your interpretive language's shell. You can get the same effect with cleaner syntax."
  },
  {
    "author": "pdp",
    "avatar": "c4db4e65c9f09f2a373fcaefa5e2bfb4",
    "date": "2009-02-25T10:52:25.000Z",
    "content": "bash is pretty much a general purpose programming language. it has sockets, ways to interfere with C libs, etc. the reason I chose bash to implement most of the functionalities of this toolkit is because it comes by default and also it does a better job when it comes to managing processes and tasks then most general purposes languages. it is also quite fast compared to ruby for example. for sure python, ruby and perl can be used to do similar things but because they are too general purpose you will endup with much larger source code which will quickly turn into a framework, imho.\n\nmy argument is that the framework is already written for you. we do not need yet another abstraction layer on the top of the standard shell which already contains the majority of the functionalities that we need. the rest of the functionalities are provided by various standard utilities which are well integrated with the particular distribution you are running and the packet management system. some of the standard shell utills also provide features to interact with 3rd-party components in the most simplistic way (<code>expect</code> for example),  while it will be a lot harder to do something similar with a general purpose language or the missing functionalities rely on a 3rd-party lib which is not easy to install or requires a fair bit of dependencies.\n\nanother example is metasploit's session management feature. it is very useful, indeed, to start several sessions to the targets and switch between them on the go. though, this is a metasploit specific feature. however, <code>screen</code> and <code>script</code> provide similar functionalities which happen to be a lot better and work for all utilities including metasploit. therefore, I would rather rely on the toolkit that comes by default.\n\nat the end of the day Jeriko is not a framework. it is a toolkit which is designed to run from the command line. all it does is it to save yourself some efforts typing long commands. it also ensures that no orphan processes are left when exiting different tasks. :)"
  },
  {
    "author": "hartog",
    "avatar": "d7ab3cfa2161dd46283b929d3713d850",
    "date": "2009-03-06T14:43:14.000Z",
    "content": "@pdp; great post, proofs the power of the shell once more :-&gt;. Some nice constructions in their as well :-&gt;\r\n\r\n@postmodern; since when are sed, awk, grep, wget and many many others primitive? Most of them are/have (micro) expression/programming languages and they can be piped together. Throw in some Perl one-liners to become really powerful.  *grrrrr* ;-&gt;"
  },
  {
    "author": "sid77",
    "avatar": "9395fbf8d4e237a0cde498342956fc07",
    "date": "2009-03-06T15:55:26.000Z",
    "content": "Hi,\n\nI've written a small patch against Jeriko-r31 to add some functionalities:\n+ option to choose whether to run nessus or openvas\n+ option to choose which metasploit db plugin to load\n+ a bigger jerikorc\n+ fixed a small typo in scan-vulnerabilities\n\nThe patch is hosted here: <a href=\"http://sid77.slackware.it/jeriko/\" rel=\"nofollow\">http://sid77.slackware.it/jeriko/</a>\n\nciao"
  },
  {
    "author": "pdp",
    "avatar": "c4db4e65c9f09f2a373fcaefa5e2bfb4",
    "date": "2009-03-09T09:45:57.000Z",
    "content": "excellent, I will have a look :)"
  },
  {
    "author": "pagvac",
    "avatar": "0367b81839d31a5fa3d7bea79ef71b9e",
    "date": "2009-03-14T11:15:47.000Z",
    "content": "i agree that most of the stuff we need is on the shell already. pentesting frameworks is like the new security-testing hype. first we had hundreds of portscanners, then hundreds of webapp MiTM proxies, then hundreds of fuzzers, then hundreds of SQL injectors, now it's about pentesting frameworks :)\r\n\r\nKnowing a few scripting tricks is extremely powerful, as already-available tools are not customized enough for our tasks sometimes. furthermore, sometimes learning how to do something with a publicly-available tool can be MORE time-consuming than writing your own bash script to do so."
  },
  {
    "author": "JC",
    "avatar": "6c71369c9360a410220f94ac04e4add3",
    "date": "2009-04-24T09:30:01.000Z",
    "content": "Love this to bits - it just works.\r\n\r\nHave you tried it with OpenVAS? I am not sure that OpenVAS-client is command line plug compatible with nessus"
  },
  {
    "author": "pdp",
    "avatar": "c4db4e65c9f09f2a373fcaefa5e2bfb4",
    "date": "2009-04-24T11:37:28.000Z",
    "content": "My humble opinion is that we should have scraped nessus altogether and started something better from scratch but this is my humble opinion only."
  },
  {
    "author": "enigma",
    "avatar": "d7ec177332946a097a42d338f41b29e1",
    "date": "2009-06-20T13:58:28.000Z",
    "content": "A lot of useful information and I totally agree with some of the issue's raised, I've never installed nessus, its great for security testing but only if the server your scanning has nessus on the backend, which half of them dont!"
  },
  {
    "author": "Jerry",
    "avatar": "dd0e9f4367efa46be2649e923483c591",
    "date": "2010-08-15T22:36:55.000Z",
    "content": "I totally agree with Your article. Further more I would say that You can skip altogether frameworks and their pre-made exploits and payloads. Exploits have to be tuned each time to be effective and payloads are almost all catch by AV when touching the disk, even if You encode them. They can still have some chances if they run all in memory. But I had most success with unique non staged binary payloads. I also agree that with the CLI You can handle everything, even multiple sessions, better and faster then in msfconsole. For example using the cli command 'socket' You can create a listening server which forks on a unix socket on each new connection and then You can connect to each background process. This way You're handling unlimited sessions fast and in 1 line."
  }
]