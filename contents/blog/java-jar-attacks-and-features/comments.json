[
  {
    "author": "hackathology",
    "avatar": "271ecedbd232e23677ddc1d3956147eb",
    "date": "2007-11-11T02:39:21.000Z",
    "content": "Hey pdp, this is a really an ingenious technique, however, i havent come across web sites that runs java applet with uploading features."
  },
  {
    "author": "pdp",
    "avatar": "c4db4e65c9f09f2a373fcaefa5e2bfb4",
    "date": "2007-11-11T08:45:32.000Z",
    "content": "you don't need a java applet with uploading features. All you need is to be able to upload a simple JPG file."
  },
  {
    "author": "zataz",
    "avatar": "6f999d15ec58b3b76a4f15a84a0852eb",
    "date": "2007-11-11T11:53:30.000Z",
    "content": "Hey, this is the same technic as \"ActionScript 3 in Adobe Flash Player 9.0.47.0 socket handling allows port probing\". But could not be use as proxy. http://securityreason.com/securityalert/2995"
  },
  {
    "author": ".ï»©ï»¨ïº®ï»ªïº´",
    "avatar": "e53f5d616931bfe8fa74bfd9f72e049e",
    "date": "2007-11-11T21:42:39.000Z",
    "content": "And hope for lacking MIME checks of course ;)"
  },
  {
    "author": "venom23",
    "avatar": "9dc92a25c30efa451e5c54c5ca8bbe94",
    "date": "2007-11-12T10:41:57.000Z",
    "content": "isn't it even dangerous for the target server to host a malicious class file? We would use this user->applet-thing to be able to access more ports on the server, right?\n\nThis is really frightening... :#"
  },
  {
    "author": "rezn",
    "avatar": "5d1658ac36692c8b5ff5612aa9d6a837",
    "date": "2007-11-12T11:59:14.000Z",
    "content": "..you also need a way to get the malicious image you uploaded to be the target of an APPLET or OBJECT tag inside someone's browser.  If you upload an doctored image (with a jar tacked onto the end), and it ends up as the target of an IMG tag, all you've done is made someone download a few extra bytes.\r\n\r\nvery interesting find, however, and i'm sure it'll come in handy in some situations.\r\n\r\npdp, can you expand upon \"As [a] side note, the same technique can be used to trick application into running arbitrary Java classes.\""
  },
  {
    "author": "Dave",
    "avatar": "318a601d968e1f67c5ddcffa691466d7",
    "date": "2007-11-12T13:33:00.000Z",
    "content": "The flaw here is not really with Java but rather with insecure Firewall configuration / insecure permission models.\r\n\r\nIf you trust machines on your local network then you had better make sure that those machines are secure.  Better yet, don't use any sort if IP address based security model.  IP addresses can be spoofed or even stolen and hence don't make for good authentication."
  },
  {
    "author": "vaj",
    "avatar": "1360a092d30480b4f0c94547ee8c77e6",
    "date": "2007-11-14T01:40:23.000Z",
    "content": "so you say that if i send user a web page with link to \r\n\r\nhttp&#58;//10.0.0.1/level/15/exec/-/configure/-/banner/motd/xssworm.com\r\n\r\nand there is cisco router on 10.0.0.1 and cisco router has http bug, user can deliver payload to internal vulnerable IP ? heheh no news here (-;\r\n\r\n<blockquote>IF #2 - tricking the user into visiting the malicious resource</blockquote>\r\n\r\nwhat is a 'user' ? what is a 'visit' to a resource? rss embed into everything. internet pushing and pulling now. vista desktop make 'visit' on behalf of user and follow links and submit cookie and 'click' things. so does igoogle rojo netvibe yahoo  live and more.\r\n\r\nlink embedded in any page gets 'clicks' from automatic spiders and bots\r\n\r\nbrowser have widget to precache favorite page or predictive surf and restore session. we have tracking cookie and token everywhere that persist across many domain. user computer is clicking on links all day long without interaction therefore xss is important vector for delivery of serious hacking pdp!"
  },
  {
    "author": "pdp",
    "avatar": "c4db4e65c9f09f2a373fcaefa5e2bfb4",
    "date": "2007-11-14T07:35:35.000Z",
    "content": "vaj, :) not quite"
  },
  {
    "author": "flipper",
    "avatar": "99905dc7cfd6a28a06a1dcc231009a6e",
    "date": "2007-11-14T11:08:43.000Z",
    "content": "pdp, i tried to figure out how this works?\n\ni was playing with a jar applet embeded in a jpeg imageg (copy /b...all of that) but in a IMG tag call from html file..nothing happens. I thing there must be a way of triggering the applet, but it doesnt seem to be an easy task at all..in case that's even possible.\n\nThank you."
  },
  {
    "author": "RobW",
    "avatar": "b4d496e7cf902dae322168f63530b3e1",
    "date": "2007-11-14T11:28:51.000Z",
    "content": "The only interesting thing here is that it seems like Java will accept JAR files ending in \".jpg\"... is that right?  You didn't say that explicitly, so I'm unsure.\r\n\r\nAs far as an attack vector, it's very weak (as you mentioned) -- it would require a server that outside users can upload files to, but which ALSO has some valuable services unprotected against internal users.  I've certainly never seen a setup anything like that.  It's common sense... a public-facing webserver, PARTICULARLY if you allow uploads of files that it then hosts! -- is occasionally vulnerable to flaws in PHP, your CMS, Apache, etc. etc., so you'd never put your important private company data on it, and you'd also never give it free access to the rest of your internal network (which is implied if your internal users can access it freely, which you require).\r\n\r\nSo if someone actually has the exact setup you need, I'll bet there are much simpler ways to crack them than tricking a user to visiting your custom-built applet page!\r\n\r\nLast thing: what did you mean by this?  \"As I side note, the same technique can be used to trick application into running arbitrary Java classes.\""
  },
  {
    "author": "pdp",
    "avatar": "c4db4e65c9f09f2a373fcaefa5e2bfb4",
    "date": "2007-11-14T14:42:25.000Z",
    "content": "flipper, you don't load the applet from the an HTML inside the JAR. you should load it from an external page.\r\n\r\nRobW, you've got it wrong. I will get back with a working example as soon as I get some of my other stuff on track.\r\n\r\nThe technique is very simple. It is all described in the post above."
  },
  {
    "author": "pdp",
    "avatar": "c4db4e65c9f09f2a373fcaefa5e2bfb4",
    "date": "2007-11-14T14:44:56.000Z",
    "content": "btw, RobW, I've certainly seen setups like that. However, I am not saying that this is the ultimate attack vector. All I am saying is that this attack is something to keep in mind."
  },
  {
    "author": "Bug",
    "avatar": "fae6bbde7c049739f6824f4125d62916",
    "date": "2007-11-14T14:52:29.000Z",
    "content": "This is utter rubbish, you can't learn anything about the server (the jar is executed on the client NOT the server. If the applet did try and probe the server from the client, you couldn't learn anything you could more simply learn by just running a port scanning tool) and the Java sand-box stops the applet on the client machine probing the client machine. \r\n\r\nIf you are suggesting you get someone on the server side to run the applet, whoopie do, the applet still can't pass that information on as it can't connect to anything other than itself. \r\n\r\nI'm sorry, this is total nonsense."
  },
  {
    "author": "pdp",
    "avatar": "c4db4e65c9f09f2a373fcaefa5e2bfb4",
    "date": "2007-11-14T14:56:24.000Z",
    "content": "<blockquote>Applets are not allowed to open network connections to any computer, except for the host that provided the .class files. This is either the host where the html page came from, or the host specified in the codebase parameter in the applet tag, with codebase taking precendence. <a href=\"http://java.sun.com/sfaq/\" rel=\"nofollow\">Applet Security</a></blockquote>"
  },
  {
    "author": "justpassingthrough",
    "avatar": "1242bf19d1c335d6ac2d90bda03a0547",
    "date": "2007-11-15T00:08:09.000Z",
    "content": "So, therefore, all you have to do to exploit is get someone to load a malicious page with , since codebase takes priority? This seems a little too good to be true."
  },
  {
    "author": "justpassingthrough",
    "avatar": "1242bf19d1c335d6ac2d90bda03a0547",
    "date": "2007-11-15T00:11:02.000Z",
    "content": "Gah. Apparently your board supports html.\r\n&lt;applet codebase=\"localhost\" src=\"malicious.jar\" /&gt; was the proper snippet."
  },
  {
    "author": "vaj",
    "avatar": "1360a092d30480b4f0c94547ee8c77e6",
    "date": "2007-11-15T02:43:00.000Z",
    "content": "bug, noone cares about hacking the individual server. Web 2.0 services are distributed, the attack surface is vast. get with the times, ./grandpa (-;"
  },
  {
    "author": "Mihai",
    "avatar": "01a33612b9e75022d9b7fd5ed86c7856",
    "date": "2008-03-11T03:28:29.000Z",
    "content": "I think you missed the point that bug made. The friggin' applet still executes within the client. It doesn't suddenly acquire server priviledges. You'd have to spawn a virtual machine on the server machine and have a class run in it, that's the kind of support your applet would need in order to poke around. Yeah, they talk about that on the web -- if an applet requires connecting to something other than its originating host, some process on the server must help it. You're confusing some unrelated concepts here.\r\n\r\nIf you seem to think that this upload-then-run-me issue is some sort of an Achile's heel, well, it is not. Simple sanitizing techniques in your file uploading should do the trick. Check out the bugtraq lists every now and then."
  },
  {
    "author": "pdp",
    "avatar": "c4db4e65c9f09f2a373fcaefa5e2bfb4",
    "date": "2008-03-11T08:04:20.000Z",
    "content": "Mihai, none of the libraries that I've tested which check whether an uploaded blob is a valid issue has detected the malicious JAR attached. This is the fact. But if you don't believe me, go and do some experiments on your own.\r\n\r\nI think that you misunderstood the post."
  },
  {
    "author": "ymajoros",
    "avatar": "fe4eff39c6e2389afdf42a74fe07f229",
    "date": "2008-06-02T10:10:44.000Z",
    "content": "No one seems to have noticed Dave's feedback. If you base your security on ip addresses... well... I know many people do just that, but it still is quite stupid. An IP address is an attribute of some machine on a network, which is quite different from a secure credential identifying some user. There could be a lot of users behind the same IP, a user could use multiple computers from different locations and still should have legit access... So, it isn't a safe, secure and flexible way of identifying users."
  },
  {
    "author": "Inferno",
    "avatar": "7a32c9bca90b81d44ce4d0c3df5774ec",
    "date": "2009-01-26T04:53:11.000Z",
    "content": "Hi pdp,\r\n\r\nI have found another server side fix for the GIFAR issue and also referenced this article at my blog \r\nhttp://securethoughts.com/?p=35.\r\n\r\nThanks,\r\nInferno"
  },
  {
    "author": "pdp",
    "avatar": "c4db4e65c9f09f2a373fcaefa5e2bfb4",
    "date": "2009-01-26T11:51:03.000Z",
    "content": "thanks, I will have a look."
  },
  {
    "author": "m",
    "avatar": "bad3be28fccb8aa62b8f415a11fe2f49",
    "date": "2009-03-03T01:11:11.000Z",
    "content": "How many worthwhile targets are boxes that someone would be running a browser on at all? \r\n\r\nHonestly, as far as I can tell, the most interesting thing here is that java will run stuff with strange extensions. Which could be interesting, seeing as Netscape will automatically download files that it doesn't recognize an extension for.\r\n\r\nNo matter what, this seems to be worthless without some form of social engineering. And there are already plenty of nasty things you can do if you can get someone to point a browser at your website."
  }
]