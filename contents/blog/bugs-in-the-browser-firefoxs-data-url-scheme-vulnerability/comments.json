[
  {
    "author": "digi7al64",
    "avatar": "ac08a11dabb6e8a4477a4fc96b7399be",
    "date": "2007-11-01T04:46:03.000Z",
    "content": "I used to use the data directive quite a fair bit to bypass filters and in fact my first myspace exploit used it.\r\n\r\nhttp://www.criticalsecurity.net/index.php?showtopic=14573&amp;hl=\r\n\r\nYou can also use base64 in the meta tag\r\n\r\n<pre><code>&lt;META http-equiv=\"refresh\" content=\"5;URL=data:text/html;base64,PHNjcmlwdD5hbGVydCgxKTs8L3NjcmlwdD4=\"&gt;</code></pre>\r\n\r\nor drop the base64 altogether\r\n\r\n<pre><code>data:text/html,&lt;script&gt;alert(1)&lt;/script&gt;</code></pre>\r\n\r\nyou can also use it to get the use to be prompted to download files but i haven't worked out how to make that work correctly yet\r\n\r\n<pre><code>data:text/cmd;,test</pre></code>"
  },
  {
    "author": "Boris",
    "avatar": "b0bc3bbf4a82fd4847acd5cd209d565e",
    "date": "2007-11-01T04:53:42.000Z",
    "content": "Out of curiosity, what exactly in that data: spec led you to think that this is not the right behavior?  As you say, schemes should be whitelisted, not blacklisted when filtering; otherwise any non-HTTP scheme exposed by the UA is a possible exploit vector against the site...\r\n\r\nGiving data: the origin of its loader has the obvious benefit that one can communicate back and forth with an  loaded via a data: URI.\r\n\r\nAs for extensions, they are supposed to do security checks on all URI loads.  And in most cases they want to use the \"disallow loads that inherit the origin\" flag to said security check.  Any extension that doesn't do that is in for a world of hurt, and not just due to data:.  It's easy to abuse other protocols (file:// comes to mind) if the extension blindly loads them."
  },
  {
    "author": "Boris",
    "avatar": "b0bc3bbf4a82fd4847acd5cd209d565e",
    "date": "2007-11-01T04:57:23.000Z",
    "content": "Oh, and as a side note changing this behavior will in fact break sites that use data:.  Given that the sites that are \"vulnerable\" are simply using buggy filtering (and need to get fixed no matter what happens with data:), it's a tough tradeoff."
  },
  {
    "author": "Jesse Ruderman",
    "avatar": "d2dc9227eafcd0ec5ba3712ee4f19b75",
    "date": "2007-11-01T05:31:38.000Z",
    "content": "This is the behavior intended by Firefox developers.  Firefox developers are aware that it can lead to XSS in poorly coded sites and that Safari and Opera behave differently.  See discussion in https://bugzilla.mozilla.org/show_bug.cgi?id=255107.\r\n\r\nNetscape 4 has \"mocha:\" and \"livescript:\", and IE has \"vbscript:\", so it has never been the case that blacklisting just \"javascript:\" in web applications was safe.\r\n\r\nThis wasn't exactly secret.  The bug report is not hidden, and http://ha.ckers.org/xss.html and http://www.squarefree.com/securitytips/web-developers.html both mention data: URLs as potential XSS vectors."
  },
  {
    "author": "vindic",
    "avatar": "2fbd3fcfa626bd4301c18cdbd207a7bb",
    "date": "2007-11-01T06:13:25.000Z",
    "content": "very nice, again. i found one foul in your's text\r\n\r\n<blockquote>The best way to pro[j]ect yourself from this kind of attack</blockquote>"
  },
  {
    "author": "pdp",
    "avatar": "c4db4e65c9f09f2a373fcaefa5e2bfb4",
    "date": "2007-11-01T08:29:13.000Z",
    "content": "digi7al64, nice!\r\n\r\nBoris and Jesse, first of all, the reason I've put this together is mainly to inform about my personal surprise that actually this thing works. I've been playing with data urls for ages, though never new they are executed within the context of the calling page. Of course it makes sense but, because, as you said, the caller needs to communicate somehow with the spawned page, you have to allow this type of communication. Though, not Safari nor Opera follow Mozilla's design decision. So, even if this is the intended behavior, you guys have a lot of work to do in order to make sure that developers clearly perceive <strong>data:</strong> URLs as <strong>javascript:</strong> URLs. Yes, this vector has been in the xss cheat sheet for ages. I wrote about it like an year ago over <a href=\"http://www.gnucitizen.org/blog/self-contained-xss-attacks/\" rel=\"nofollow\">here</a>. RSnake, the guy who put the cheat sheet, has responded on this with the following:\r\n\r\n<blockquote>This has been on the XSS Cheat Sheet for nearly two years and has been documented elsewhere for years before that. Itâ€™s no different than the javascript: directive in a URL. This isnâ€™t new. <strong>Itâ€™s useful for certain things, like building CSRF tools, but cookie theft is not one of them.</strong></blockquote>\r\n\r\nOne thing is for certain, there are tones of vulnerable sites and extensions due to this <strong>data:</strong> URL scheme behavior, mainly because of the lack of education.\r\n\r\nAnd no, it is not the same as <strong>file:</strong> or any other URL protocol. These protocols are successfully blocked by the browser when served from <strong>http:</strong> and <strong>https:</strong> origins."
  },
  {
    "author": "digi7al64",
    "avatar": "ac08a11dabb6e8a4477a4fc96b7399be",
    "date": "2007-11-01T09:40:58.000Z",
    "content": "To chime back in I believe data: is an unnecessary, unsafe and useless protocol that should never have been developed and it provides no real benefit other then to introduce a new security risk. \r\n\r\nI mean it serves no real purpose, I can use ajax for client to server communications, javascript to control the gui, xml for data and xslt for style. The only _real_ benefit is image generation and even then why would generate images on the fly. There are already many and fair better ways to deliver image and rich media content to the screen.\r\n\r\nMozilla should just drop it and let it die."
  },
  {
    "author": "Wladimir Palant",
    "avatar": "7806629160a492b05d21fd738953a4cf",
    "date": "2007-11-01T10:11:58.000Z",
    "content": "Heh, now you got us all very intrigued - and then this. Just another XSS vector that has been known for ages. Not exactly a vulnerability in the Firefox browser but very much the expected behavior (if I embed a frame with data: in my web page I expect it to have access to the main page).\r\n\r\n<blockquote>One thing is for certain, there are tones of vulnerable sites and extensions due to this data: URL scheme behavior</blockquote>\r\n\r\nSure. And every site that filters links using a blacklist will be vulnerable to *something*. But most sanitizing attempts don't go much beyond filtering out the word \"javascript\" (and we don't need the XSS cheat sheet to know that this is not nearly enough). This is an education issue of course, but one that we probably won't see solved in the next few years.\r\n\r\nNote that Firefox no longer allows HTTP redirects to data: URLs. Blind redirects are very common and this was making each of them an XSS vulnerability."
  },
  {
    "author": "pdp",
    "avatar": "c4db4e65c9f09f2a373fcaefa5e2bfb4",
    "date": "2007-11-01T12:06:33.000Z",
    "content": "Wladimir, it does not only work by embeding an iframe as you suggested, but it also works by clicking on a link which contains the data: directive. It still works even when the link target is set to _blank. Pages opened in new tabs by do not inherit the caller context, do they? The data: url scheme makes pretty much every application vulnerable to XSS by default when browsed with Firefox. Moreover, there are poor understandings among Extension writers what data: can do. If it is not a vulnerability then it is one of the biggest disinformation experiment ever. Why Safari and Opera does not follow Firefox's behavior?"
  },
  {
    "author": "pdp",
    "avatar": "c4db4e65c9f09f2a373fcaefa5e2bfb4",
    "date": "2007-11-02T00:34:39.000Z",
    "content": "another reason why context propagation in data: URLs is a bad news is provided by Stefano Dipaola over <a href=\"http://www.wisec.it/sectou.php?id=472a5b8d1a4cd\" rel=\"nofollow\">here</a>."
  },
  {
    "author": "hackathology",
    "avatar": "271ecedbd232e23677ddc1d3956147eb",
    "date": "2007-11-03T03:04:32.000Z",
    "content": "nice one pdp"
  },
  {
    "author": "Mark",
    "avatar": "a3414f53770b74271ba5b006bf8dd47a",
    "date": "2007-11-03T03:11:04.000Z",
    "content": "Heh. I used data: a few months ago to get a backframe payload in ;) \r\n\r\nAFAIK all recent versions of noscript detect malicious DOM in data: \r\n \r\n\r\nGood times... Good times..."
  },
  {
    "author": "kofi",
    "avatar": "b76ed0bd4d0c5f93dd7eb8d5da95633b",
    "date": "2007-11-03T17:56:11.000Z",
    "content": "also 2.0.0.9 version affected this vulenerability"
  },
  {
    "author": "Boris",
    "avatar": "b0bc3bbf4a82fd4847acd5cd209d565e",
    "date": "2007-11-06T00:07:04.000Z",
    "content": "Not sure what kofi is talking about.  This behavior hasn't changed since sometime in 1999 or 2000."
  },
  {
    "author": "pdp",
    "avatar": "c4db4e65c9f09f2a373fcaefa5e2bfb4",
    "date": "2007-11-06T07:35:40.000Z",
    "content": "for firefox 1.5 this behaviour is simply not there."
  },
  {
    "author": "hyperfukbot",
    "avatar": "570e00c53412dbb0c61d0a0b32f84a4d",
    "date": "2007-11-10T23:00:14.000Z",
    "content": "i blogged about this a few months ago\r\nhttp://qqq3468349856.blogspot.com/2007/08/why.html"
  },
  {
    "author": "pdp",
    "avatar": "c4db4e65c9f09f2a373fcaefa5e2bfb4",
    "date": "2007-11-10T23:38:45.000Z",
    "content": "this is awesome, I am very much interested in the other variants of data:. can you get some POCs to show how they work?"
  }
]