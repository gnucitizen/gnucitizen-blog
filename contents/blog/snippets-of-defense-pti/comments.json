[
  {
    "author": "Kishor",
    "avatar": "8646bd4e904762c599e11665cc67f158",
    "date": "2007-10-07T14:52:17.000Z",
    "content": "Nice trick to get your app scanned for xss for free!\r\n\r\nAlthough, a frustrated attacker could add dummy entries to your logs. And since you believe that the log file contains accurate XSSs , you may have hard time removing those false entries.\r\n\r\nYou may need something more at server side to detect such spamming."
  },
  {
    "author": "ascii",
    "avatar": "9eb5ed1067bbc3c9675f8911316b7600",
    "date": "2007-10-07T15:15:57.000Z",
    "content": "hi mario! a simple bypass is\r\n\r\n<pre><code>alert=old_alert;alert(\"test\");</code></pre>\r\n\r\nbut i know you didn't intended this as a silver bullet, more like a kiddie protection. wisec has published some info on how to block the fetch/set of a cookie value for geko based browsers, it's more generic than trap alert()\r\n\r\nhttp://www.wisec.it/sectou.php?id=44c7949f6de03\r\n\r\nit can be bypassed too using frames and other techniques (eg: you can try everything but if it's hooked in js it can also be reverted to the original in js). anyway why not? it's cheap! i'm going to implement both on my sities\r\n\r\nps: pdp make this textbox larger please : )"
  },
  {
    "author": "clinisbut",
    "avatar": "df19c3b9f76eb4e351b9d09f71e1b103",
    "date": "2007-10-07T19:03:45.000Z",
    "content": "Yeah it's a good way to detect when someone try to hack our site.\r\nBut there is the famous Firebug extension for firefox that offers the console.log() to debug apps. Maybe a function like yours would be necessary for firebug?\r\n\r\nps:I know my english is poor..."
  },
  {
    "author": "RoC_MM",
    "avatar": "f84bc32c30e1ca0c33aa407fdf581dad",
    "date": "2007-10-07T19:31:15.000Z",
    "content": "pdp, this is a good blog, I read it all the time.\r\n\r\nascii, in cases like this, I use the \"enlarge textareas\" bookmarklet.  Make a bookmark with this as the URL, then click it anytime you are on a page with a too small text box.\r\n\r\n<pre><code>javascript:(function(){var i,x; for(i=0;x=document.getElementsByTagName(%22textarea%22)[i];++i) x.cols += 150; })()</code></pre>"
  },
  {
    "author": "ascii",
    "avatar": "9eb5ed1067bbc3c9675f8911316b7600",
    "date": "2007-10-08T01:46:40.000Z",
    "content": "@RoC_MM: thanks good bookmarklet!"
  },
  {
    "author": "kuza55",
    "avatar": "2f6303f9095f59c14c3097ef4df566f5",
    "date": "2007-10-08T08:20:54.000Z",
    "content": "Personally I don't like this for two reasons:\r\n\r\na) It places IDS logic into the web page, thereby giving it to the attacker\r\nb) It puts you in a position where an attacker can easily clog your IDS with false positives\r\nc) It won't work if referers are turned off\r\n\r\nSure, in regards to (b), you could collect more data, but you still need some way to verify it - you might be able to automate this by getting some machine to visit the pages in the referer (or passed to your logged as a GET parameter), but that's just ugly (and seems like a wide open security hole), and it also tells you nothing about POST XSS's, and so unless you want to discount all the POST XSS's this detects, you would have to investigate every referer you get with no parameters (or parameters for which your page uses POST data).\r\n\r\nSo while it might work, it will probably give people a false sense of security, and be a headache to administer if anyone malicious notices it."
  },
  {
    "author": "djteller",
    "avatar": "44c5e290ccf283471210752d0b1ed6df",
    "date": "2007-10-09T21:14:55.000Z",
    "content": "Kuza55, this is against kiddies, and since 99% are using automated scripts that will work just fine.\r\nYou can even obfuscate this code to make it harder to read.\r\n\r\nAlways good to have logs, even if they are false you can learn from them."
  },
  {
    "author": "bedirhan",
    "avatar": "dff7d8b6c240962aecc4dfa95e99005a",
    "date": "2007-10-28T17:19:41.000Z",
    "content": "Sorry if this makes a duplicate post, but during the last one your domain seemed to go down :(.\r\n\r\nIf we can change the code to;\r\n\r\n<pre><code>alert = (function(){\r\n    var old_alert = alert;\r\n    return function(m){\r\n        // logging goes here\r\n        old_alert(m);\r\n    }\r\n})();</code></pre>\r\n\r\nthen by-passing would be a little harder. This is creating private members thru closures."
  },
  {
    "author": "pdp",
    "avatar": "c4db4e65c9f09f2a373fcaefa5e2bfb4",
    "date": "2007-10-28T18:01:09.000Z",
    "content": "bedirhan, excellent. I did something similar for <a href=\"http://www.gnucitizen.org/blog/technika\" rel=\"nofollow\">technika</a>. I needed to insert some code, but I did not wanted to pollute the <strong>this</strong> namespace with some random vars such as <strong>i</strong> or anything along these lines. My solution is the following:\r\n\r\n<pre><code>(new function () {\r\n  return function (self) {\r\n    // your code here\r\n  };\r\n})(this);</code></pre>\r\n\r\nThis is almost like self executing, self destructive code. sweet!"
  }
]