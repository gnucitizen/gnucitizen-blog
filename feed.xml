<?xml version="1.0" encoding="utf-8" ?><rss version="2.0" xml:base="https://www.gnucitizen.org" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:wfw="http://wellformedweb.org/CommentAPI/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><atom:link href="https://www.gnucitizen.org/feed.xml" rel="self" type="application/rss+xml"></atom:link><title></title><description></description><link>https://www.gnucitizen.org/feed.xml</link><pubDate>Fri, 16 Aug 2019 11:01:00 GMT</pubDate><language>en</language><item><title>10 Rules From Books</title><link>https://www.gnucitizen.org/blog/10-rules-from-books/</link><pubDate>Fri, 16 Aug 2019 11:01:00 GMT</pubDate><guid isPermaLink="true">https://www.gnucitizen.org/blog/10-rules-from-books/</guid><dc:creator>pdp</dc:creator><description><![CDATA[
<p>Here are 10 things I&#39;ve learned by reading books on various subject. I find this list tremendously useful and I promise I will provide the book titles at a later time. The reason I am sharing this is answered in point 2. Here we go:</p>
<ol>
<li><p>Achieve results by following a system. Do you want to get fit? Come up with a system that will make you fit. Do you want to write? Well, develop a system that creates time for you to write. It is easy to follow a system once it is in place.</p>
</li>
<li><p>Trying to be successful is the wrong way to look at life. Try to make yourself useful instead. Ask yourself the following questions: How can I be useful? How can I contribute? Success comes from being useful to others.</p>
</li>
<li><p>Speak less. Listen more. Ask questions to discover the base truths, first principles, and universal commonalities! Those that know how to listen effectively rule the world.</p>
</li>
<li><p>Don&#39;t obsess with your weaknesses. Concentrate on your strengths. You are not meant to be everything and I am sure there are a few things that you can do better than others. Being great in 2-3 things is better than being amazing in one specific thing.</p>
</li>
<li><p>Exercise humility. Everyone wants to be successful, respected and for their opinion to matter. Other people are just like you. Put yourself in their shoes.</p>
</li>
<li><p>Think progress! Never settle for the status quo. Improve everything you do.</p>
</li>
<li><p>You will never gain anything from arguments - not with your spouse, family, friends, colleagues and never on the Internet. There are other ways to win people over and at the same time make long-lasting relationships despite the differences in opinion.</p>
</li>
<li><p>If you cannot measure, you cannot manage. This is especially true for your time. Record where your time goes to understand how to manage it effectively. Time is a scarce resource always in deficit.</p>
</li>
<li><p>People are interested in other people. We are not concerned with the product of your work but by your method. In a true sense, we are most interested in how the sausage was made?</p>
</li>
<li><p>Copyright your faults. They are you.</p>
</li>
</ol>
<p><a href="https://twitter.com/pdp/status/1162303395870531584?s=20">https://twitter.com/pdp/status/1162303395870531584?s=20</a></p>

]]></description></item><item><title>BBH Scale</title><link>https://www.gnucitizen.org/blog/bbh-scale/</link><pubDate>Tue, 09 Jul 2019 16:38:00 GMT</pubDate><guid isPermaLink="true">https://www.gnucitizen.org/blog/bbh-scale/</guid><dc:creator>pdp</dc:creator><description><![CDATA[
<p>Here is a short tutorial on how to search when you do BBH. Now, you can do a lot of unix pipes and grep/ripgrep and so on but if you want to get a scale you might want to look into elasticsearch. #bugbountytips Here are a couple of commands to get you started:</p>
<p>First, you need to convert your data to JSON. <code>jq</code> is your friend. The following command will curl a request and put it into a document:</p>
<pre><code class="language-bash">C=$(curl -v https://secapps.com 2&gt;&amp;1) jq -n <span class="string">'{contents: env.C}'</span></code></pre>
<p>Sending a document to elasticsearch can be done like this:</p>
<pre><code class="language-bash">curl -XPUT <span class="string">'http://localhost:9200/curl/_doc/abc'</span> -d <span class="string">'{}'</span></code></pre>
<p>Stringing it all together should look like this:</p>
<pre><code class="language-bash">T=https://secapps.com D=abc C=$(curl -v <span class="string">"<span class="variable">$T</span>"</span> 2&gt;&amp;1) jq -n <span class="string">'{contents: env.C}'</span> | curl -XPUT <span class="string">"http://localhost:9200/curl/_doc/<span class="variable">$D</span>"</span> -d <span class="string">'@-'</span></code></pre>
<p>In the previous tweet, you control the <code>T</code> and <code>D</code> variables. The rest is just doing the job. These variables are only available for that specific line. You don&#39;t need to export them beforehand. Bash is magic!</p>
<p>Once you have your docs in elasticsearch you can search whichever way you want and with kebana, you can graph them too or set alerts ;) Now you can call yourself a data scientists.</p>
<p>Spinup a $5 DO node and play around.</p>
<p><a href="https://twitter.com/pdp/status/1148617500357222401">https://twitter.com/pdp/status/1148617500357222401</a></p>

]]></description></item><item><title>Time And Money</title><link>https://www.gnucitizen.org/blog/time-and-money/</link><pubDate>Tue, 09 Jul 2019 14:45:00 GMT</pubDate><guid isPermaLink="true">https://www.gnucitizen.org/blog/time-and-money/</guid><dc:creator>pdp</dc:creator><description><![CDATA[
<p>Time is money only if the money you earn is multiple of the amount of time you spend working. Needless to say, this is not a great place to be. Ideas, timing, and execution is money.</p>
<p><a href="https://twitter.com/pdp/status/1148588900639739904">https://twitter.com/pdp/status/1148588900639739904</a></p>

]]></description></item><item><title>Writing Good Bug Bounty Reports</title><link>https://www.gnucitizen.org/blog/writing-good-bug-bounty-reports/</link><pubDate>Mon, 08 Jul 2019 21:18:00 GMT</pubDate><guid isPermaLink="true">https://www.gnucitizen.org/blog/writing-good-bug-bounty-reports/</guid><dc:creator>pdp</dc:creator><description><![CDATA[
<p>This is what I do to write successful bug bounty reports that payout. I used this technique on 3 hidden bug bounty programs. One of them gave me a 2K bounty. For the other two, I don&#39;t know. #bugbountytips</p>
<ol>
<li><p>Your introduction is like the first chapter of a book. This is your opportunity to show style and creativity. If this part of the report is weak the rest of the content is likely to be skimmed over.</p>
</li>
<li><p>Don&#39;t just slam some technical description and call it a day. Layout exactly how you found the vulnerability. It is like a good story. What tipped you to look in this direction? How long did it take you to get there? What obstacles you had to overcome and how you came on top against all odds?</p>
</li>
<li><p>Don&#39;t overstate the impact. I am guilty of this as well. Sometimes things are not as critical as they look but you could provide a measured assessment that will tip the scale your way. It is better to be truthful than annoying.</p>
</li>
<li><p>Rember that it is much easier to make a good first impression than to change the other person&#39;s mind. The later comes at personal cost. They have to admit they were wrong. You are not going to make friends this way.</p>
</li>
<li><p>Ask for feedback. I started doing this on my most recent reports. There is no other way to know what you did wrong and how you can improve.</p>
</li>
<li><p>Always provide value. This morning I reported an issue I was almost sure it will be a dup. The potential reward was 5 digits. I wrote them a nice bug report. It was a dup but my report still rocks.</p>
</li>
</ol>
<p>My most recent reports are like chapters of a book (only 3 of them so far). When I wrote them I was thinking that perhaps one day I will bind them all and create an international bestseller.</p>
<p>This is also time for self-reflection. You might learn a thing or two about your style or perhaps figure out if it is time to change strategy and direction.</p>
<p>Remember that there are people on the other side of the computer screen. Communication is an essential skill.</p>
<p>Btw, I messed up on almost all points above forgetting my years of training. The final report was the most important deliverable at the company where I and @dcuthbert used to work. We used to spend a lot of time to make sure everything was perfect before we hand over.</p>
<p><a href="https://twitter.com/pdp/status/1148325597690703872">https://twitter.com/pdp/status/1148325597690703872</a></p>

]]></description></item><item><title>Bug Bounty Tips</title><link>https://www.gnucitizen.org/blog/bug-bounty-tips/</link><pubDate>Sun, 07 Jul 2019 19:01:00 GMT</pubDate><guid isPermaLink="true">https://www.gnucitizen.org/blog/bug-bounty-tips/</guid><dc:creator>pdp</dc:creator><description><![CDATA[
<p>Perhaps the reason you are not finding vulns/bugs is either because your environment is not setup correctly or your methodology requires improvements. Here are a number of tips to help you with that #bugbountytips</p>
<ol start="0">
<li><p>Pivot between multiple exit nodes. Some services apply ACL rules so you will never be able to reach them from your home broadband. Use AWS C9 ;)</p>
</li>
<li><p>If you use separate profiles for Chrome you are doing it wrong. You will be wrestling the browser and the target application at the same time. Don&#39;t do this. Use <code>pown cdb launch -t</code> or <code>pown cdb launch -t -P auto</code> to launch chrome with a pentest-friendly configuration.</p>
</li>
<li><p>Don&#39;t stick to the scope. You need to have a bird-eye view to understand how things work. Don&#39;t hack but do take out of scope targets for consideration.</p>
</li>
<li><p>You will be as good as your tools. If all you do is Burp, ZAP and the likes you will find the same bugs as your peers. You need to understand that all tools have their own intricacies and you will miss things if you stick to one method only. Diversify!</p>
</li>
<li><p>Automate as much as you can. Sometimes you are lucky and you get a small window of an opportunity. I will let you know about one such bug once it gets triaged - but let&#39;s say that it appears I had only a window of a couple of hours to find it.</p>
</li>
<li><p>Either you do surface scans or deep dives. Don&#39;t do both at the same time. You will get lost and you will miss things. I&#39;ve done this mistake myself many times.</p>
</li>
<li><p>Read old reports. The older they are the better. Everyone is looking at the most recent hactivity reports and will follow the same trails. Some of the coolest research you will hear about at BH this year is based on papers written in 2006.</p>
</li>
<li><p>Have a methodology. When I was pentesting for a boutique consultancy company in London I learned to use a well-developed methodology which I initially hated. I still consider it one of the best methodologies I have ever encountered. Develop your own.</p>
</li>
<li><p>Take your time. Tomorrow you will have better ideas. It hurts when you don&#39;t find anything but this is part of the creative process. I don&#39;t call it a failure, I call it iteration.</p>
</li>
<li><p>Don&#39;t obsess about making the perfect system. Far too many people, including myself, try to make the perfect recon or the perfect automated scanning infrastructure, etc. If other people have built it, capitalize on their work. Solve the unsolved problems.</p>
</li>
</ol>
<p>This is what I have on the top of my head. I hope it helps.</p>
<p><a href="https://twitter.com/pdp/status/1147928550307258368">https://twitter.com/pdp/status/1147928550307258368</a></p>

]]></description></item><item><title>Jobs Of Tomorrow</title><link>https://www.gnucitizen.org/blog/jobs-of-tomorrow/</link><pubDate>Thu, 16 May 2019 08:50:00 GMT</pubDate><guid isPermaLink="true">https://www.gnucitizen.org/blog/jobs-of-tomorrow/</guid><dc:creator>pdp</dc:creator><description><![CDATA[
<p>Keep in mind that your kids will do jobs that don’t yet exist. When I was a child the cyber security field did not exist - not in the same capacity as it did when I started my professional career. What are the niche fields that will drive future innovation?</p>
<p>Different sub-disciplines of AI and machine learning for sure including sub-branches of law, psychology, ethics and security.</p>
<p>Space travel - we are doing it today and we will continue doing it even more in the future.</p>
<p>Robotics - mostly design I imagine. You could be a robotics designer much like car designers these days.</p>
<p>Smart wearable clothing - a new world of possibilities will open when you convert atoms to bits which will require rethinking the whole industry from the ground up.</p>
<p>New types of entertainment - Netflix is already experimenting successfully with interactive content - as AR and VR get adopted will see more of it I am sure. This will require merging gaming with cinematography. It is already happening.</p>
<p>Bioengineering and nano-engineering!</p>
<p><a href="https://twitter.com/pdp/status/1128930582900150273">https://twitter.com/pdp/status/1128930582900150273</a></p>

]]></description></item><item><title>It has been a while</title><link>https://www.gnucitizen.org/blog/it-has-been-a-while/</link><pubDate>Sat, 30 Jun 2018 09:49:53 GMT</pubDate><guid isPermaLink="true">https://www.gnucitizen.org/blog/it-has-been-a-while/</guid><dc:creator>pdp</dc:creator><description><![CDATA[
<p>GNUCITIZEN is 12 years old more or less. Can you believe it?</p>
<p>I am still trying to process the information and while it saddens me a little that we left the blogging scene for the past 8+ years I am proud with what we have achieved and the kind of legacy we have created. Even after so many successes and countless more failures, it is interesting to trace GC&#39;s impact on the security community over the years - from being first to try out different vulnerability disclosure practices to popping calc.exe from PDF documents or hacking hubs - it has more or less started here and took a life on its own.</p>
<p>It is almost surreal watching our old videos and even sometimes it is a bit embarrassing reading some of our old research, blog posts, and the good old comment flame wars. But this is normal. As you grow older and learn more you also become aware of your personal limitations. The naivety of the younger you are long gone and what is left is the hardened shell fortified by years of experience.</p>
<p>But, like any good story there is a sequel and while I cannot promise that will be better than the original what I am certain of is that it will be packed with this same hardened experience I talk about. It will be likely more measured, less flamboyant and to some extent conservative but it will also be insightful and perhaps a little naive. Naivety is important although it may come at some personal costs. To some extent, I believe the security community has forgotten its roots and what I am hoping to achieve with GC2 is to restore to balance in the universe.</p>
<p>So are you ready? I am not. But I am ready to dive deep!</p>

]]></description></item><item><title>Landing Proxify</title><link>https://www.gnucitizen.org/blog/landing-proxify/</link><pubDate>Wed, 06 Feb 2013 23:28:40 GMT</pubDate><guid isPermaLink="true">https://www.gnucitizen.org/blog/landing-proxify/</guid><dc:creator>pdp</dc:creator><description><![CDATA[
<p>I am really happy to announce the first release of proxify. I started writing this tool several years ago but I was never able to finished it. The first release (version 1.0) is now available for <a href="http://code.google.com/p/gnucitizen/downloads/list">download</a> on all platforms: Linux, Mac and Windows.</p>
<h3 id="what-is-proxify">What is Proxify</h3>
<p>The idea behind Proxify is to create a proxy that is just good at doing proxying. It is the proxy of all proxies so-to-say. Proxify is lightweight, streamlined, concurrent and very efficient proxy utility that is easy to integrate into other tools. There is a good need for such tools because proxies are quite complex and not trivial to write even if you choose to use a high-level language such as Java, Python or Ruby.</p>
<p>This tool is written in C and comes with all dependencies pre-included in the package. This means that it is very portable on all platforms and you do not need any special setup. Having all files in the same folder is just enough to make it run.</p>
<p>Proxify is multithreaded and can in theory make optimal use of multi-cpu environments. The tool is non-buffering which means that it is really fast. It supports WebSockets, WebRTS and other streaming protocols. It fully understands HTTP. It does SSL interception and clones certificates on the fly.</p>
<h3 id="integration-at-its-core">Integration At Its Core</h3>
<p>As mentioned earlier, Proxify is great if you need to create a custom proxy application or you want to embed proxy functionalities into your own app. The tool will do all the hard work and you just need to provide a very simple restful HTTP service to do the forwarding of data between the browser and the remote target. The protocol is based on the HTTP proxy specifications with the only difference that you don&#39;t have to support the CONNECT method or do any SSL interception. Additionally, Proxify automatically detects end of streams when certain types of protocols are used. This makes the tool very handy, easy, re-usable technology that can be used in situations when we just want to write simple scripts to da a trivial job without to understand completely how the whole stack works. Everything is pretty much magically handled for you: and there is a lot going on behind the scene.</p>
<h3 id="other-usages">Other Usages</h3>
<p>Proxify can be used for many things. Here is an example of how you will launch the tool to hex dump all the trafic to the screen:</p>
<pre><code class="language-bash">./proxify -p 8080 -x</code></pre>
<p>The output of this command will look like this:</p>
<pre><code class="language-bash">xxxxxx:xxxxx pdp$ xxx/proxify -p 8080 -x
Proxify Version 1.0

Copyright 2013 GNUCITIZEN. All rights reserved.
Commercial use of this software is strictly prohibited.
For commercial options please contact us at http://www.gnucitizen.org/.

[0000]   47 45 54 20 2F 20 48 54   54 50 2F 31 2E 31 0D 0A   GET...HT TP.1.1..
[0000]   55 73 65 72 2D 41 67 65   6E 74 3A 20 63 75 72 6C   User.Age nt..curl
[bfc8]   2F 37 2E 32 37 2E 30 0D   0A 48 6F 73 74 3A 20 77   .7.27.0. .Host..w
[f4c9]   77 77 2E 67 6E 75 63 69   74 69 7A 65 6E 2E 6F 72   ww.gnuci tizen.or
[cea4]   67 0D 0A 41 63 63 65 70   74 3A 20 2A 2F 2A 0D 0A   g..Accep t.......
[609f]   50 72 6F 78 79 2D 43 6F   6E 6E 65 63 74 69 6F 6E   Proxy.Co nnection
[f2e5]   3A 20 4B 65 65 70 2D 41   6C 69 76 65 0D 0A 0D 0A   ..Keep.A live....</code></pre>
<p>If we want to dump all requests and responses into individual files than we can use the following command:</p>
<pre><code class="language-bash">./proxify -p 8080 -D /path/to/folder</code></pre>
<p>This will also capture everything that is streamed as well, which means that you can even record video, audio and whatever is streaming over HTTP. You can mix and match all options for bets result and please check the command flags for more information.</p>
<h3 id="tool-readiness">Tool Readiness</h3>
<p>Proxify is essentially ready for most use-cases although there are several things which needs to be improved especially around the SSL interception. Please use the tool with caution because it may have memory leaks or even memory corruption bugs. A huge portions of the code is not throughly tested. This is something I am working to improve in the near future. I am also planning to add more options for even better control over the process.</p>
<h3 id="fair-use">Fair Use</h3>
<p>The tool is free! You can use it right away. However, comercial use is strictly prohibited at this stage. If you want to use the tool for comercial purposes, please get in touch to discuss your options.</p>

]]></description></item><item><title>Fuzzing XML and JSON Pt.1</title><link>https://www.gnucitizen.org/blog/fuzzing-xml-and-json-pt-1/</link><pubDate>Thu, 13 Dec 2012 11:47:35 GMT</pubDate><guid isPermaLink="true">https://www.gnucitizen.org/blog/fuzzing-xml-and-json-pt-1/</guid><dc:creator>pdp</dc:creator><description><![CDATA[
<blockquote>
<p>It is hard to get back to blogging especially when there are easier alternatives to scratch your itch - I am talking about <a href="http://twitter.com/pdp">twitter</a>. However, I decided to make the effort and see where it takes me. It will be difficult initially but practice leads to continuous improvement.</p>
</blockquote>
<p>What I would like to do is to highlight some of the work I did to take two relatively simple and straightforward penetration testing practices to the next level: this is XML and JSON fuzzing. If you have worked as a penetration tester or you have been moderately interested in web security you should have encountered a web service written on top of either of these technologies.</p>
<p>Both JSON and XML are slick beasts. They are both structured data containers and rely on well-formatted documents in order to be processed successfully. There is very little room for movement out of the spec and in fact they are both error intolerant. Most parsers will explode even on the tiniest errors in the document structure, such as for example if you leave a comma on the last item of an array inside a JSON structure. The reason I am mentioning this is because this is the basis of the two core fuzzing strategies - as I define them.</p>
<p>The first strategy is to concentrate on finding bugs in the actual parser/processor. In this case we will aim to submit ill-formatted documents and observe for strange behaviour. The types of problems typically discovered through this strategy are memory corruption bugs. The reason for this is because even in 2012 strings are still difficult to deal with and both formats are human-readable and rely heavily on processing text. Even binary input is represented textually.</p>
<p>The second strategy is to concentrate on finding bugs after the document has been parsed/processed. In this case we will aim to submit unexpected input but still stick to the format and the specifications of the document. This strategy is used to discover a lot wider range of bugs depending on how the structured data is used later on inside the application. The types of bugs discovered will depend on the targeted platform, language and all kinds of other things.</p>
<p>Both strategies can be mixed. However, from personal experience, I believe that you will be better off if you don&#39;t because things can get quite confusing and you may not be able to setup all necessary measurement equipment correctly in order to find actual bugs or extract any useful data.</p>
<p>The first strategy I tend to leave it in the realm of research. The reason for this is because there are not that many parsers for both JSON and XML. Each programming language usually offers a few libraries which are widely adopted. Fuzzing these libraries will get us bugs which apply to all applications that make use of them - i.e. research in my opinion. On the other hand, the second strategy is targeted towards specific applications and platforms. And this is what I will mainly concentrate on for the rest of this series of articles.</p>
<p>As I discussed earlier this &quot;second&quot;, so-to-say, strategy is all about sending unexpected input but still keeping the document well formatted. So what is unexpected input? Well unexpected input is everything from very large numbers to very small ones (MIN_INT, MAX_INT, UNSIGNED MAX_INT, LONG, etc). Unexpected input is also logical values such as true and false, the special atom nil, null and 0 and 1. Some other unexpected values could be empty data structures where a value is expected such as when sending empty array but the application expects a number or a string. The list goes on and on and you can spend weeks tuning a fuzzer to find more interesting stuff by incorporating more unexpected input.</p>
<p>It is fair to say that not all unexpected values are equal. Some values are more likely to cause strange behaviour than others and this all depends on the target platform. Let&#39;s take JSON for example. In JSON we have 2 main structured containers: <code>{}</code> - object and <code>[]</code> - array. Now, Java applications typically map/unmarshall JSON structures to classes. Therefore if we have a class which has public member variable <code>&quot;a&quot;</code> of type integer but we send an empty object, an exception will be raised before the input is even processed by the application. This is not quite like that in other programming languages which are not so strictly typed. For example, in PHP the developer may expect an integer but actually the parser will produce an array and while this will cause an error at some point later inside the application it will not immediately explode during parsing. This kind of conditions are very interesting.</p>
<p>So why I am mentioning this? Well, typically a fuzzer will generate a lot of combinations. Some of them may be fruitful. Most of them will be waste of time. However, by knowing what we are up against we can tune the fuzzer to be smarter and as a result of this a lot faster and more fruitful - I rather spend manually analysing 1000 results than 1000000.</p>
<p>I think I am running out of energy. After so many years of silence this post looks quite lengthy. Btw, such fuzzers exist. You can find one as part of the <a href="http://www.websecurify.com/suite">Websecurify Online Suite</a> and you can go ahead and try it for free now. Both <a href="https://suite.websecurify.com/market/jsonfuzz">JSON</a> and <a href="https://suite.websecurify.com/market/xmlfuzz">XML</a> are well supported. The reason I am mentioning this is because the rest of the series will concentrate on exploring how these fuzzers work and what kind of vulnerabilities we can find with them.</p>

]]></description></item><item><title>You and Your Research</title><link>https://www.gnucitizen.org/blog/you-and-your-research/</link><pubDate>Wed, 05 Dec 2012 00:40:04 GMT</pubDate><guid isPermaLink="true">https://www.gnucitizen.org/blog/you-and-your-research/</guid><dc:creator>pdp</dc:creator><description><![CDATA[
<p>This is really one of my favourite talks from this year&#39;s HITB in KL.</p>
<iframe class="video" src="//www.youtube.com/embed/JoVx_-bM8Tg" frameborder="0" allowfullscreen></iframe>

<p><a href="https://twitter.com/haroonmeer">@haroonmeer</a> did an exceptional job at describing what it takes to produce an exceptional piece of work/research and the various pitfalls and sacrifices one needs to make.</p>

]]></description></item><item><title>Well Websecurify Runs on The iPhone</title><link>https://www.gnucitizen.org/blog/well-websecurify-runs-on-the-iphone/</link><pubDate>Thu, 04 Aug 2011 16:27:04 GMT</pubDate><guid isPermaLink="true">https://www.gnucitizen.org/blog/well-websecurify-runs-on-the-iphone/</guid><dc:creator>pdp</dc:creator><description><![CDATA[
<p>This is not necessarily news anymore since it was <a href="http://blog.websecurify.com/2011/08/websecurify-for-iphone-preview.html">discussed</a> on the Websecurify official blog but we are so excited about it that we could not hold ourselves from posting it here too.</p>
<iframe class="video" src="//www.youtube.com/embed/19U37T7F8Lw" frameborder="0" allowfullscreen></iframe>

<p>The testing engine used in this particular version of Websecurify is optimized to run with the least possible amount of memory. The results of the scanner are as good as those produced by all other Websecurify variants although in some cases it may miss some statistically unlikely types of issues. This is not directly and only applicable to the iPhone version. No! Similar tradeoffs are also present even in standard desktop/server based scanners although they are usually less visible and obscured behind tones of options. The bottom line is that the scanner not only runs natively on the iOS but also works as expected.</p>
<blockquote>
<p>Now this is exciting! Websecurify is the first in the world mobile web application testing technology.</p>
</blockquote>
<p>If you have any suggestions, recommendations or general feedback please do let us know. You can also <a href="https://spreadsheets.google.com/spreadsheet/viewform?formkey=dEFlRENtdnJKSTJaeC13TjhHaVduckE6MQ">participate</a> in the beta test program which will allow you to have a play with tool as we are polishing it for the official release.</p>
<p><em>The possibilities are endless.</em></p>

]]></description></item></channel></rss>