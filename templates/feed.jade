doctype xml

//- --
//- --
//- --

include ./globals.jade
include ./helpers.jade

//- --
//- --
//- --

rss(version='2.0', xml:base=siteUrl, xmlns:content='http://purl.org/rss/1.0/modules/content/', xmlns:media="http://search.yahoo.com/mrss/", xmlns:wfw='http://wellformedweb.org/CommentAPI/', xmlns:dc='http://purl.org/dc/elements/1.1/', xmlns:atom='http://www.w3.org/2005/Atom')
    channel
        block channel
            unless items
                - var source = contents.blog

                //- --

                - var items = Object.keys(source).map(function (key) {
                -     return source[key]['index.md']
                - }).filter(function (item) {
                -     return item && item.metadata && item.metadata.date
                - })

            //- --

            - items.sort(function (itemA, itemB) {
            -     return Date.parse(itemB.metadata.date) - Date.parse(itemA.metadata.date)
            - })

            //- --

            - function convertData(input) {
            -     try { return (new Date(input || new Date().getTime())).toUTCString() } catch (e) { return input }
            - }

            //- --

            atom:link(href=page.getUrl(siteUrl), rel='self', type='application/rss+xml')

            //- --

            - var feedTitle = (page.title && page.title != 'Untitled' ? page.title : null) || title || site || brand

            //- --

            - var feedDescription = page.metadata.description || description || null

            //- --

            - var pageUrl = (page.metadata.url ? getUrl(page.metadata.url) : null) || (url ? getUrl(url) : null) || page.getUrl(siteUrl) || null

            //- --

            title=feedTitle
            description=feedDescription
            link=pageUrl
            pubDate=convertData((items[0] && items[0].metadata.date) || ((new Date()).getTime()))
            language='en'

            //- --

            - var index = 0

            //- --

            - function carveImage(input) {
            -     return input.replace(/\n+/mg, '').replace(/.*?!\[.*?\]\((.*?)\).*/, '$1').replace(/^(?!\/).+/, '').trim()
            - }

            - function guessMediaType(url) {
            -     if (url.match(/\.jpe?g$/i)) {
            -         return 'image/jpg'
            -     } else
            -     if (url.match(/\.png$/i)) {
            -         return 'image/png'
            -     } else {
            -         return null
            -     }
            - }

            //- --

            for item in items
                - var permalink = item.getUrl(siteUrl || null)

                //- --

                - var image = item.metadata.image

                if !image
                    - image = carveImage(item.markdown)

                //- --

                item
                    title=(page.metadata.prefix ? page.metadata.prefix + item.title : item.title)
                    link=permalink
                    pubDate=convertData(item.metadata.date)
                    guid(isPermaLink='true')=permalink

                    //- --

                    if image
                        media:content(url=getUrl(image), type=guessMediaType(image))

                    //- --

                    if item.metadata.author
                        dc:creator=item.metadata.author

                    //- --

                    description
                        | <![CDATA[
                        | !{item.getHtml(url)}
                        | ]]>

                //- --

                if index++ == (page.metadata.count || 10)
                    - break

//- --
